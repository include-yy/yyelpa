;;; test.el test for dash.el -*- lexical-binding:t -*-

;;; Commentary:

;; 测试样例来自 https://github.com/magnars/dash.el/blob/master/dev/examples.el

;; 以下代码用于从 dash 的 `defexamples' 生成 ert 测试
;; 来自 dev/dash-defs.el

;; (defvar dash--example-buffer nil)
;; (defun dash--example-to-test (example)
;;   (pcase example
;;     (`(,actual => ,expected) `(should (equal ,actual ,expected)))
;;     (`(,actual ~> ,expected) `(should (approx= ,actual ,expected)))
;;     (`(,actual !!> ,(and (pred symbolp) expected))
;;      `(should-error ,actual :type ',expected))
;;     (`(,actual !!> ,expected)
;;      `(should (equal (should-error ,actual) ',expected)))
;;     (_ (error "Invalid test case: %S" example))))

;; (defmacro defexamples (fn &rest examples)
;;   (setq examples (-partition 3 examples))
;;   (princ (format "(ert-deftest %s ()" fn)
;; 	 (or dash--example-buffer (current-buffer)))
;;   (dolist (e examples)
;;     (princ "\n" (or dash--example-buffer (current-buffer)))
;;     (prin1 (dash--example-to-test e)
;; 	   (or dash--example-buffer (current-buffer))))
;;   (princ ")\n\n" (or dash--example-buffer (current-buffer)))
;;   nil)

;; (defun def-example-group (name doc &rest examples)
;;   (declare (indent defun))
;;   nil)

;;; Code:

(load-file "./dash.el")
(require 'cl-lib)
(require 'ert)

(defun square (num) (* num num))
(defvar dash--epsilon 1e-15)
(defun approx= (u v)
  (or (= u v)
      (< (/ (abs (- u v))
	    (max (abs u) (abs v)))
	 dash--epsilon)))

(ert-deftest -map ()
  "-map --map"
  (should (equal (-map #'square '(1 2 3 4)) '(1 4 9 16)))
  (should (equal (-map (lambda (num) (* num num)) '(1 2 3 4)) '(1 4 9 16)))
  (should (equal (-map #'1+ '(1 2 3 4)) '(2 3 4 5)))
  (should (equal (--map (* it it) '(1 2 3 4)) '(1 4 9 16)))
  (should (equal (-map #'identity ()) ())))

(ert-deftest -map-when ()
  "-map-when --map-when"
  (should (equal (-map-first #'cl-oddp #'1+ '(1 2 3)) '(2 2 3)))
  (should (equal (-map-when #'cl-evenp #'square '(1 2 3 4)) '(1 4 3 16)))
  (should (equal (-map-when #'cl-evenp (lambda (x) (* x x)) '(1 2 3 4)) '(1 4 3 16)))
  (should (equal (--map-when (> it 2) (* it it) '(1 2 3 4)) '(1 2 9 16)))
  (should (equal (--map-when (= it 2) 17 '(1 2 3 4)) '(1 17 3 4)))
  (should (equal (-map-when (lambda (n) (= n 3)) (-const 0) '(1 2 3 4)) '(1 2 0 4))))

(ert-deftest -map-first ()
  "-map-first --map-first"
  (should (equal (-map-first #'cl-evenp #'square '(1 2 3 4)) '(1 4 3 4)))
  (should (equal (-map-first #'cl-evenp (lambda (x) (* x x)) '(1 2 3 4)) '(1 4 3 4)))
  (should (equal (--map-first (> it 2) (* it it) '(1 2 3 4)) '(1 2 9 4)))
  (should (equal (--map-first (= it 2) 17 '(1 2 3 2)) '(1 17 3 2)))
  (should (equal (-map-first #'cl-evenp #'square '(1 3 5 7)) '(1 3 5 7)))
  (should (equal (-map-first #'cl-evenp (lambda (x) (* x x)) '(1 3 5 7)) '(1 3 5 7)))
  (should (equal (-map-first #'cl-evenp #'square '(2)) '(4)))
  (should (equal (-map-first #'cl-evenp (lambda (x) (* x x)) '(2)) '(4)))
  (should (equal (-map-first #'cl-evenp #'square nil) ()))
  (should (equal (-map-first #'cl-evenp (lambda (x) (* x x)) nil) ())))

(ert-deftest -map-last ()
  "-map-last --map-last"
  (should (equal (-map-last #'cl-evenp #'square '(1 2 3 4)) '(1 2 3 16)))
  (should (equal (-map-last #'cl-evenp (lambda (x) (* x x)) '(1 2 3 4)) '(1 2 3 16)))
  (should (equal (--map-last (> it 2) (* it it) '(1 2 3 4)) '(1 2 3 16)))
  (should (equal (--map-last (= it 2) 17 '(1 2 3 2)) '(1 2 3 17)))
  (should (equal (-map-last #'cl-evenp #'square '(1 3 5 7)) '(1 3 5 7)))
  (should (equal (-map-last #'cl-evenp (lambda (x) (* x x)) '(1 3 5 7)) '(1 3 5 7)))
  (should (equal (-map-last #'cl-evenp #'square '(2)) '(4)))
  (should (equal (-map-last #'cl-evenp (lambda (x) (* x x)) '(2)) '(4)))
  (should (equal (-map-last #'cl-evenp #'square nil) ()))
  (should (equal (-map-last #'cl-evenp (lambda (x) (* x x)) nil) ()))
  ;; the next two tests assert that the input list is not modified #158
  ;; https://github.com/magnars/dash.el/issues/158
  (should (equal (let ((l '(1 2 3)))
		   (list (--map-last (< it 2) (number-to-string it) l) l))
		 '(("1" 2 3) (1 2 3))))
  (should (equal (let ((l '(1 2 3)))
		   (list (--map-last (< it 3) (number-to-string it) l) l))
		 '((1 "2" 3) (1 2 3)))))

(ert-deftest -map-indexed ()
  "-map-indexed --map-indexed"
  (should (equal (-map-indexed (lambda (index item) (- item index)) '(1 2 3 4)) '(1 1 1 1)))
  (should (equal (--map-indexed (- it it-index) '(1 2 3 4)) '(1 1 1 1)))
  (should (equal (-map-indexed #'* '(1 2 3 4)) '(0 2 6 12)))
  (should (equal (-map-indexed #'ignore '(1 2 3 4)) '(nil nil nil nil)))
  (should (equal (-map-indexed #'ignore '()) '()))
  (should (equal (--map-indexed t '(1 2 3 4)) '(t t t t)))
  (should (equal (--map-indexed t '()) '())))

(ert-deftest -annotate ()
  "-annotate --annotate"
  (should (equal (-annotate #'1+ '(1 2 3)) '((2 . 1) (3 . 2) (4 . 3))))
  (should (equal (-annotate #'length '((f o o) (bar baz))) '((3 f o o) (2 bar baz))))
  (should (equal (--annotate (> it 1) '(0 1 2 3)) '((nil . 0) (nil . 1) (t . 2) (t . 3))))
  (should (equal (--annotate nil ()) ()))
  (should (equal (--annotate nil '(a)) '((nil . a))))
  (should (equal (--annotate nil '((a))) '((nil a))))
  (should (equal (--annotate t ()) ()))
  (should (equal (--annotate t '(a)) '((t . a))))
  (should (equal (--annotate t '((a))) '((t a))))
  (should (equal (--annotate it ()) ()))
  (should (equal (--annotate it '(a)) '((a . a))))
  (should (equal (--annotate it '((a))) '(((a) a))))
  (should (equal (--annotate (list it) ()) ()))
  (should (equal (--annotate (list it) '(a)) '(((a) . a))))
  (should (equal (--annotate (list it) '((a))) '((((a)) a))))
  (should (equal (-annotate #'ignore ()) ()))
  (should (equal (-annotate #'ignore '(a)) '((nil . a))))
  (should (equal (-annotate #'ignore '((a))) '((nil a))))
  (should (equal (-annotate (-andfn) ()) ()))
  (should (equal (-annotate (-andfn) '(a)) '((t . a))))
  (should (equal (-annotate (-andfn) '((a))) '((t a))))
  (should (equal (-annotate #'identity ()) ()))
  (should (equal (-annotate #'identity '(a)) '((a . a))))
  (should (equal (-annotate #'identity '((a))) '(((a) a))))
  (should (equal (-annotate #'list ()) ()))
  (should (equal (-annotate #'list '(a)) '(((a) . a))))
  (should (equal (-annotate #'list '((a))) '((((a)) a)))))

(ert-deftest -splice ()
  "-splice --splice"
  (should (equal (-splice #'numberp (lambda (n) (list n n)) '(a 1 b 2)) '(a 1 1 b 2 2)))
  (should (equal (--splice t (list it it) '(1 2 3 4)) '(1 1 2 2 3 3 4 4)))
  (should (equal (--splice (eq it :magic) '((magical) (code)) '((foo) :magic (bar)))
		 '((foo) (magical) (code) (bar))))
  (should (equal (--splice nil (list (1+ it)) 'nil) 'nil))
  (should (equal (--splice nil (list (1+ it)) '(1)) '(1)))
  (should (equal (--splice t (list (1+ it)) 'nil) 'nil))
  (should (equal (--splice t (list (1+ it)) '(1)) '(2)))
  (should (equal (--splice nil 'nil 'nil) 'nil))
  (should (equal (--splice nil 'nil '(1)) '(1)))
  (should (equal (--splice t 'nil 'nil) 'nil))
  (should (equal (--splice t 'nil '(1)) 'nil))
  (should (equal (--splice t 'nil '(1 2)) 'nil))
  (should (equal (--splice (= it 1) 'nil '(1 2)) '(2)))
  (should (equal (--splice (= it 2) 'nil '(1 2)) '(1)))
  (should (equal (--splice (= it 1) 'nil '(1 2 3)) '(2 3)))
  (should (equal (--splice (= it 2) 'nil '(1 2 3)) '(1 3)))
  (should (equal (--splice (= it 3) 'nil '(1 2 3)) '(1 2)))
  (should (equal (-splice #'ignore (lambda (n) (list (1+ n))) 'nil) 'nil))
  (should (equal (-splice #'ignore (lambda (n) (list (1+ n))) '(1)) '(1)))
  (should (equal (-splice #'identity (lambda (n) (list (1+ n))) 'nil) 'nil))
  (should (equal (-splice #'identity (lambda (n) (list (1+ n))) '(1)) '(2)))
  (should (equal (-splice #'ignore #'ignore 'nil) 'nil))
  (should (equal (-splice #'ignore #'ignore '(1)) '(1)))
  (should (equal (-splice #'identity #'ignore 'nil) 'nil))
  (should (equal (-splice #'identity #'ignore '(1)) 'nil))
  (should (equal (-splice #'identity #'ignore '(1 2)) 'nil))
  (should (equal (-splice (-cut = 1 <>) #'ignore '(1 2)) '(2)))
  (should (equal (-splice (-cut = 2 <>) #'ignore '(1 2)) '(1)))
  (should (equal (-splice (-cut = 1 <>) #'ignore '(1 2 3)) '(2 3)))
  (should (equal (-splice (-cut = 2 <>) #'ignore '(1 2 3)) '(1 3)))
  (should (equal (-splice (-cut = 3 <>) #'ignore '(1 2 3)) '(1 2)))
  ;; Test for destructive modification.
  (should (equal (let ((l1 (list 1 2 3)) (l2 (list 4 5 6)))
		   (ignore (--splice (= it 2) l2 l1)) (list l1 l2))
		 '((1 2 3) (4 5 6)))))

(ert-deftest -splice-list ()
  "-splice-list --splice-list"
  (should (equal (-splice-list 'keywordp '(a b c) '(1 :foo 2)) '(1 a b c 2)))
  (should (equal (-splice-list 'keywordp nil '(1 :foo 2)) '(1 2)))
  (should (equal (--splice-list (keywordp it) '(a b c) '(1 :foo 2)) '(1 a b c 2))))

(ert-deftest -mapcat ()
  "-mapcat --mapcat"
  (should (equal (-mapcat 'list '(1 2 3)) '(1 2 3)))
  (should (equal (-mapcat (lambda (item) (list 0 item)) '(1 2 3)) '(0 1 0 2 0 3)))
  (should (equal (--mapcat (list 0 it) '(1 2 3)) '(0 1 0 2 0 3))))

(ert-deftest -copy ()
  "-copy"
  (should (equal (-copy '(1 2 3)) '(1 2 3)))
  (should (equal (let ((a '(1 2 3))) (eq a (-copy a))) nil)))

(ert-deftest -filter ()
  "-filter --filter"
  (should (equal (-filter (lambda (num) (= 0 (% num 2))) '(1 2 3 4)) '(2 4)))
  (should (equal (-filter #'natnump '(-2 -1 0 1 2)) '(0 1 2)))
  (should (equal (--filter (= 0 (% it 2)) '(1 2 3 4)) '(2 4)))
  (should (equal (let ((mod 2)) (-filter (lambda (n) (= 0 (% n mod))) '(1 2 3 4))) '(2 4)))
  (should (equal (let ((mod 2)) (--filter (= 0 (% it mod)) '(1 2 3 4))) '(2 4)))
  (should (equal (let ((l (list 1 2))) (setcar (-filter #'identity l) 0) l) '(1 2)))
  (should (equal (let ((l (list 1 2))) (setcar (--filter it l) 0) l) '(1 2)))
  (should (equal (-filter #'identity 'nil) 'nil))
  (should (equal (-filter #'ignore 'nil) 'nil))
  (should (equal (--filter it 'nil) 'nil))
  (should (equal (--filter nil 'nil) 'nil))
  (should (equal (-filter #'identity '(1)) '(1)))
  (should (equal (-filter #'ignore '(1)) 'nil))
  (should (equal (--filter it '(1)) '(1)))
  (should (equal (--filter nil '(1)) 'nil)))

(ert-deftest -remove ()
  "-remove --remove"
  (should (equal (-remove (lambda (num) (= 0 (% num 2))) '(1 2 3 4)) '(1 3)))
  (should (equal (-remove #'natnump '(-2 -1 0 1 2)) '(-2 -1)))
  (should (equal (--remove (= 0 (% it 2)) '(1 2 3 4)) '(1 3)))
  (should (equal (let ((mod 2)) (-remove (lambda (n) (= 0 (% n mod))) '(1 2 3 4))) '(1 3)))
  (should (equal (let ((mod 2)) (--remove (= 0 (% it mod)) '(1 2 3 4))) '(1 3)))
  (should (equal (let ((l (list 1 2))) (setcar (-remove #'ignore l) 0) l) '(1 2)))
  (should (equal (let ((l (list 1 2))) (setcar (--remove nil l) 0) l) '(1 2)))
  (should (equal (-remove #'identity 'nil) 'nil))
  (should (equal (-remove #'ignore 'nil) 'nil))
  (should (equal (--remove it 'nil) 'nil))
  (should (equal (--remove nil 'nil) 'nil))
  (should (equal (-remove #'identity '(1)) 'nil))
  (should (equal (-remove #'ignore '(1)) '(1)))
  (should (equal (--remove it '(1)) 'nil))
  (should (equal (--remove nil '(1)) '(1))))

(ert-deftest -remove-first ()
  "-remove-first --remove-first"
  (should (equal (-remove-first #'natnump '(-2 -1 0 1 2)) '(-2 -1 1 2)))
  (should (equal (-remove-first #'stringp '(1 2 "first" "second")) '(1 2 "second")))
  (should (equal (--remove-first (> it 3) '(1 2 3 4 5 6)) '(1 2 3 5 6)))
  (should (equal (-remove-first #'natnump '(2 3 4)) '(3 4)))
  (should (equal (-remove-first #'natnump '(-3 -2 -1 4)) '(-3 -2 -1)))
  (should (equal (-remove-first #'natnump '(2)) 'nil))
  (should (equal (-remove-first #'natnump 'nil) 'nil))
  (should (equal (-remove-first #'null '(1 3 5 7)) '(1 3 5 7)))
  (should (equal (let ((l (list 1 2)))
		   (setcar (-remove-first #'identity l) 0) l)
		 '(1 0)))
  (should (equal (let ((l (list 1 2)))
		   (setcar (-remove-first #'null l) 0) l)
		 '(1 2))))

(ert-deftest -remove-last ()
  "-remove-last --remove-last"
  (should (equal (-remove-last #'natnump '(1 3 5 4 7 8 10 -11)) '(1 3 5 4 7 8 -11)))
  (should (equal (-remove-last #'stringp '(1 2 "last" "second")) '(1 2 "last")))
  (should (equal (--remove-last (> it 3) '(1 2 3 4 5 6 7 8 9 10)) '(1 2 3 4 5 6 7 8 9)))
  (should (equal (let ((l (list 1 2))) (setcar (--remove-last (= it 2) l) 0) l) '(1 2)))
  (should (equal (let ((l (list 1 2))) (setcar (--remove-last (= it 0) l) 0) l) '(1 2)))
  (should (equal (-remove-last #'identity 'nil) 'nil))
  (should (equal (-remove-last #'identity '(1)) 'nil))
  (should (equal (-remove-last #'identity '(nil)) '(nil)))
  (should (equal (-remove-last #'identity '(1 2)) '(1)))
  (should (equal (-remove-last #'identity '(1 nil)) '(nil)))
  (should (equal (--remove-last t 'nil) 'nil))
  (should (equal (--remove-last t '(1)) 'nil))
  (should (equal (--remove-last t '(nil)) 'nil))
  (should (equal (--remove-last t '(1 2)) '(1)))
  (should (equal (--remove-last t '(1 2 nil)) '(1 2)))
  (should (equal (--remove-last it '(1 nil)) '(nil)))
  (should (equal (-remove-last #'null 'nil) 'nil))
  (should (equal (-remove-last #'null '(1)) '(1)))
  (should (equal (-remove-last #'null '(nil)) 'nil))
  (should (equal (-remove-last #'null '(1 2)) '(1 2)))
  (should (equal (-remove-last #'null '(nil 1)) '(1)))
  (should (equal (--remove-last nil 'nil) 'nil))
  (should (equal (--remove-last nil '(1)) '(1)))
  (should (equal (--remove-last nil '(nil)) '(nil)))
  (should (equal (--remove-last nil '(1 2)) '(1 2))))

(ert-deftest -remove-item ()
  "-remove-item"
  (should (equal (-remove-item 3 '(1 2 3 2 3 4 5 3)) '(1 2 2 4 5)))
  (should (equal (-remove-item 'foo '(foo bar baz foo)) '(bar baz)))
  (should (equal (-remove-item "bob" '("alice" "bob" "eve" "bob")) '("alice" "eve")))
  (should (equal (-remove-item nil 'nil) 'nil))
  (should (equal (-remove-item nil '(nil)) 'nil))
  (should (equal (let ((l (list 1 2))) (setcar (-remove-item 0 l) 0) l) '(1 2)))
  (should (equal (let ((l (list 1 2))) (setcar (-remove-item 1 l) 0) l) '(1 2)))
  (should (equal (let ((l (list 1 2))) (setcar (-remove-item 2 l) 0) l) '(1 2))))

(ert-deftest -non-nil ()
  "-non-nil"
  (should (equal (-non-nil '(nil 1 nil 2 nil nil 3 4 nil 5 nil)) '(1 2 3 4 5)))
  (should (equal (-non-nil '((nil))) '((nil))))
  (should (equal (-non-nil 'nil) 'nil))
  (should (equal (let ((l (list 1 2))) (setcar (-non-nil l) 0) l) '(1 2)))
  (should (equal (let ((l (list nil 1))) (setcar (-non-nil l) 0) l) '(nil 1)))
  (should (equal (let ((l (list 1 nil))) (setcar (-non-nil l) 0) l) '(1 nil))))

(ert-deftest -slice ()
  "-slice"
  (should (equal (-slice '(1 2 3 4 5) 1) '(2 3 4 5)))
  (should (equal (-slice '(1 2 3 4 5) 0 3) '(1 2 3)))
  (should (equal (-slice '(1 2 3 4 5 6 7 8 9) 1 -1 2) '(2 4 6 8)))
  ;; "to > length" should not fill in nils!
  (should (equal (-slice '(1 2 3 4 5) 0 10) '(1 2 3 4 5)))
  (should (equal (-slice '(1 2 3 4 5) -3) '(3 4 5)))
  (should (equal (-slice '(1 2 3 4 5) -3 -1) '(3 4)))
  (should (equal (-slice '(1 2 3 4 5 6) 0 nil 1) '(1 2 3 4 5 6)))
  (should (equal (-slice '(1 2 3 4 5 6) 0 nil 2) '(1 3 5)))
  (should (equal (-slice '(1 2 3 4 5 6) 0 nil 3) '(1 4)))
  (should (equal (-slice '(1 2 3 4 5 6) 0 nil 10) '(1)))
  (should (equal (-slice '(1 2 3 4 5 6) 1 4 2) '(2 4)))
  (should (equal (-slice '(1 2 3 4 5 6) 2 6 3) '(3 6)))
  (should (equal (-slice '(1 2 3 4 5 6) 2 -1 2) '(3 5)))
  (should (equal (-slice '(1 2 3 4 5 6) 0 -4 2) '(1)))
  (should (equal (-slice '(1 2 3 4 5 6) -4 -1 2) '(3 5)))
  (should (equal (-slice '(1 2 3 4 5 6) -4 5 2) '(3 5)))
  (should (equal (-slice '(1 2 3 4 5 6) -3 5 1) '(4 5)))
  (should (equal (-slice '(1 2 3 4 5 6) 1 2 10) '(2))))

(ert-deftest -take ()
  "-take"
  (should (equal (-take 3 '(1 2 3 4 5)) '(1 2 3)))
  (should (equal (-take 17 '(1 2 3 4 5)) '(1 2 3 4 5)))
  (should (equal (-take 0 '(1 2 3 4 5)) 'nil))
  (should (equal (-take -1 nil) nil))
  (should (equal (-take 0 nil) nil))
  (should (equal (-take 1 nil) nil))
  (should (equal (-take -1 '(1)) nil))
  (should (equal (-take 0 '(1)) nil))
  (should (equal (-take 1 '(1)) '(1)))
  (should (equal (-take -1 '(1 . 2)) nil))
  (should (equal (-take 0 '(1 . 2)) nil))
  (should (equal (-take 1 '(1 . 2)) '(1)))
  (should (equal (let ((l (list 1 2))) (eq (-take 3 l) l)) nil)))

(ert-deftest -take-last ()
  "-take-last"
  (should (equal (-take-last 3 '(1 2 3 4 5)) '(3 4 5)))
  (should (equal (-take-last 17 '(1 2 3 4 5)) '(1 2 3 4 5)))
  (should (equal (-take-last 1 '(1 2 3 4 5)) '(5)))
  (should (equal (-take-last 0 '(1)) nil))
  (should (equal (-take-last 0 nil) nil))
  (should (equal (-take-last -1 nil) nil))
  (should (equal (-take-last -1 '(1)) nil))
  (should (equal (let ((l (list 1 2))) (setcar (-take-last 1 l) 0) l) '(1 2)))
  (should (equal (let ((l (list 1 2))) (eq (-take-last 3 l) l)) nil)))

(ert-deftest -drop ()
  "-drop"
  (should (equal (-drop 3 '(1 2 3 4 5)) '(4 5)))
  (should (equal (-drop 17 '(1 2 3 4 5)) 'nil))
  (should (equal (-drop 0 '(1 2 3 4 5)) '(1 2 3 4 5)))
  (should (equal (-drop -1 nil) nil))
  (should (equal (-drop 0 nil) nil))
  (should (equal (-drop 1 nil) nil))
  (should (equal (-drop -1 '(1)) '(1)))
  (should (equal (-drop 0 '(1)) '(1)))
  (should (equal (-drop 1 '(1)) nil))
  (should (equal (-drop -1 '(1 . 2)) '(1 . 2)))
  (should (equal (-drop 0 '(1 . 2)) '(1 . 2)))
  (should (equal (-drop 1 '(1 . 2)) 2))
  (should (equal (let ((l (list 1 2))) (setcar (-drop 1 l) 0) l) '(1 0)))
  (should (equal (let ((l (list 1 2))) (eq (-drop 0 l) l)) t)))

(ert-deftest -drop-last ()
  "-drop-last"
  (should (equal (-drop-last 3 '(1 2 3 4 5)) '(1 2)))
  (should (equal (-drop-last 17 '(1 2 3 4 5)) 'nil))
  (should (equal (-drop-last 0 '(1 2 3 4 5)) '(1 2 3 4 5)))
  (should (equal (-drop-last 0 nil) nil))
  (should (equal (-drop-last -1 nil) nil))
  (should (equal (-drop-last -1 '(1)) '(1)))
  (should (equal (-drop-last 1 nil) nil))
  (should (equal (let ((l (list 1 2))) (setcar (-drop-last 1 l) 0) l) '(1 2)))
  (should (equal (let ((l (list 1 2))) (eq (-drop-last 0 l) l)) nil)))

(ert-deftest -take-while ()
  "-take-while --take-while"
  (should (equal (-take-while #'cl-evenp '(1 2 3 4)) 'nil))
  (should (equal (-take-while #'cl-evenp '(2 4 5 6)) '(2 4)))
  (should (equal (--take-while (< it 4) '(1 2 3 4 3 2 1)) '(1 2 3)))
  (should (equal (--take-while t nil) nil))
  (should (equal (--take-while nil nil) nil))
  (should (equal (--take-while nil '(1)) nil))
  (should (equal (--take-while nil '(1 . 2)) nil))
  (should (equal (--take-while t '(1)) '(1)))
  (should (equal (--take-while t '(1 2)) '(1 2)))
  (should (equal (--take-while (< it-index 0) '(1 . 2)) nil))
  (should (equal (--take-while (< it-index 1) '(1 . 2)) '(1)))
  (should (equal (let ((l (list 1 2))) (eq (--take-while t l) l)) nil)))

(ert-deftest -drop-while ()
  "-drop-while --drop-while"
  (should (equal (-drop-while #'cl-evenp '(1 2 3 4)) '(1 2 3 4)))
  (should (equal (-drop-while #'cl-evenp '(2 4 5 6)) '(5 6)))
  (should (equal (--drop-while (< it 4) '(1 2 3 4 3 2 1)) '(4 3 2 1)))
  (should (equal (--drop-while t nil) nil))
  (should (equal (--drop-while nil nil) nil))
  (should (equal (--drop-while nil '(1)) '(1)))
  (should (equal (--drop-while nil '(1 2)) '(1 2)))
  (should (equal (--drop-while nil '(1 . 2)) '(1 . 2)))
  (should (equal (--drop-while t '(1)) nil))
  (should (equal (--drop-while t '(1 2)) nil))
  (should (equal (--drop-while (< it-index 0) '(1 . 2)) '(1 . 2)))
  (should (equal (--drop-while (< it-index 1) '(1 . 2)) 2))
  (should (equal (let ((l (list t 2))) (setcar (-drop-while #'booleanp l) 0) l) '(t 0)))
  (should (equal (let ((l (list 1 2))) (eq (--drop-while nil l) l)) t)))

(ert-deftest -select-by-indices ()
  "-select-by-indices"
  (should (equal (-select-by-indices
		  '(4 10 2 3 6)
		  '("v" "e" "l" "o" "c" "i" "r" "a" "p" "t" "o" "r"))
		 '("c" "o" "l" "o" "r")))
  (should (equal (-select-by-indices '(2 1 0) '("a" "b" "c")) '("c" "b" "a")))
  (should (equal (-select-by-indices
		  '(0 1 2 0 1 3 3 1)
		  '("f" "a" "r" "l"))
		 '("f" "a" "r" "f" "a" "l" "l" "a"))))

(ert-deftest -select-columns ()
  "-select-columns"
  (should (equal (-select-columns '(0 2) '((1 2 3) (a b c) (:a :b :c)))
		 '((1 3) (a c) (:a :c))))
  (should (equal (-select-columns '(1) '((1 2 3) (a b c) (:a :b :c)))
		 '((2) (b) (:b))))
  (should (equal (-select-columns nil '((1 2 3) (a b c) (:a :b :c)))
		 '(nil nil nil))))

(ert-deftest -select-column ()
  "-select-column"
  (should (equal (-select-column 1 '((1 2 3) (a b c) (:a :b :c))) '(2 b :b))))

(ert-deftest -keep ()
  "-keep --keep"
  (should (equal (-keep #'cdr '((1 2 3) (4 5) (6))) '((2 3) (5))))
  (should (equal (-keep (lambda (n) (and (> n 3) (* 10 n))) '(1 2 3 4 5 6)) '(40 50 60)))
  (should (equal (--keep (and (> it 3) (* 10 it)) '(1 2 3 4 5 6)) '(40 50 60)))
  (should (equal (-keep #'null '(nil)) '(t)))
  (should (equal (--keep it '(nil)) 'nil))
  (should (equal (--keep t '(nil)) '(t)))
  (should (equal (--keep t 'nil) 'nil))
  (should (equal (-keep #'identity 'nil) 'nil)))

(ert-deftest -concat ()
  "-concat"
  (should (equal (-concat '(1)) '(1)))
  (should (equal (-concat '(1) '(2)) '(1 2)))
  (should (equal (-concat '(1) '(2 3) '(4)) '(1 2 3 4)))
  (should (equal (-concat) nil)))

(ert-deftest -flatten ()
  "-flatten"
  (should (equal (-flatten '((1))) '(1)))
  (should (equal (-flatten '((1 (2 3) (((4 (5))))))) '(1 2 3 4 5)))
  (should (equal (-flatten '(1 2 (3 . 4))) '(1 2 (3 . 4))))
  (should (equal (-flatten '(nil nil nil)) nil))
  (should (equal (-flatten '(nil (1) nil)) '(1)))
  (should (equal (-flatten '(nil (nil) nil)) nil)))

(ert-deftest -flatten-n ()
  "-flatten-n"
  (should (equal (-flatten-n 1 '((1 2) ((3 4) ((5 6))))) '(1 2 (3 4) ((5 6)))))
  (should (equal (-flatten-n 2 '((1 2) ((3 4) ((5 6))))) '(1 2 3 4 (5 6))))
  (should (equal (-flatten-n 3 '((1 2) ((3 4) ((5 6))))) '(1 2 3 4 5 6)))
  (should (equal (-flatten-n 0 '(3 4)) '(3 4)))
  (should (equal (-flatten-n 0 '((1 2) (3 4))) '((1 2) (3 4))))
  (should (equal (-flatten-n 0 '(((1 2) (3 4)))) '(((1 2) (3 4)))))
  (should (equal (-flatten-n 1 '(((1 . 2)) ((3 . 4)))) '((1 . 2) (3 . 4))))
  ;; Test for destructive modification.
  (should (equal (let ((l (list 1 (list 2) 3))) (ignore (-flatten-n 0 l)) l)
		 '(1 (2) 3)))
  (should (equal (let ((l (list 1 (list 2) 3))) (ignore (-flatten-n 1 l)) l)
		 '(1 (2) 3)))
  (should (equal (let ((l (list 1 (list 2) 3))) (ignore (-flatten-n 2 l)) l)
		 '(1 (2) 3))))

(ert-deftest -replace ()
  "-replace"
  (should (equal (-replace 1 "1" '(1 2 3 4 3 2 1)) '("1" 2 3 4 3 2 "1")))
  (should (equal (-replace "foo" "bar" '("a" "nice" "foo" "sentence" "about" "foo"))
		 '("a" "nice" "bar" "sentence" "about" "bar")))
  (should (equal (-replace 1 2 nil) nil)))

(ert-deftest -replace-first ()
  "-replace-first"
  (should (equal (-replace-first 1 "1" '(1 2 3 4 3 2 1)) '("1" 2 3 4 3 2 1)))
  (should (equal (-replace-first "foo" "bar" '("a" "nice" "foo" "sentence" "about" "foo"))
		 '("a" "nice" "bar" "sentence" "about" "foo")))
  (should (equal (-replace-first 1 2 nil) nil)))

(ert-deftest -replace-last ()
  "-replace-last"
  (should (equal (-replace-last 1 "1" '(1 2 3 4 3 2 1)) '(1 2 3 4 3 2 "1")))
  (should (equal (-replace-last "foo" "bar" '("a" "nice" "foo" "sentence" "about" "foo"))
		 '("a" "nice" "foo" "sentence" "about" "bar")))
  (should (equal (-replace-last 1 2 nil) nil)))

(ert-deftest -insert-at ()
  "-insert-at"
  (should (equal (-insert-at 1 'x '(a b c)) '(a x b c)))
  (should (equal (-insert-at 12 'x '(a b c)) '(a b c x))))

(ert-deftest -replace-at ()
  "-replace-at"
  (should (equal (-replace-at 0 9 '(0 1 2 3 4 5)) '(9 1 2 3 4 5)))
  (should (equal (-replace-at 1 9 '(0 1 2 3 4 5)) '(0 9 2 3 4 5)))
  (should (equal (-replace-at 4 9 '(0 1 2 3 4 5)) '(0 1 2 3 9 5)))
  (should (equal (-replace-at 5 9 '(0 1 2 3 4 5)) '(0 1 2 3 4 9))))

(ert-deftest -update-at ()
  "-update-at --update-at"
  (should (equal (-update-at 0 (lambda (x) (+ x 9)) '(0 1 2 3 4 5)) '(9 1 2 3 4 5)))
  (should (equal (-update-at 1 (lambda (x) (+ x 8)) '(0 1 2 3 4 5)) '(0 9 2 3 4 5)))
  (should (equal (--update-at 2 (length it) '("foo" "bar" "baz" "quux"))
		 '("foo" "bar" 3 "quux")))
  (should (equal (--update-at 2 (concat it "zab") '("foo" "bar" "baz" "quux"))
		 '("foo" "bar" "bazzab" "quux"))))

(ert-deftest -remove-at ()
  "-remove-at"
  (should (equal (-remove-at 0 '(a b c)) '(b c)))
  (should (equal (-remove-at 1 '(a b c)) '(a c)))
  (should (equal (-remove-at 2 '(a b c)) '(a b)))
  (should (equal (-remove-at -1 nil) nil))
  (should (equal (-remove-at 0 nil) nil))
  (should (equal (-remove-at 1 nil) nil))
  (should (equal (-remove-at -1 '(a)) '(a)))
  (should (equal (-remove-at 0 '(a)) nil))
  (should (equal (-remove-at 1 '(a)) '(a)))
  (should (equal (-remove-at -1 '(a b)) '(a b)))
  (should (equal (-remove-at 0 '(a b)) '(b)))
  (should (equal (-remove-at 1 '(a b)) '(a)))
  (should (equal (-remove-at 2 '(a b)) '(a b)))
  (should (equal (-remove-at 0 '((a))) nil))
  (should (equal (-remove-at 2 '((a) b (c . d) e)) '((a) b e)))
  ;; Test for destructive modification.
  (should (equal (let ((l (list 0))) (ignore (-remove-at -1 l)) l) '(0)))
  (should (equal (let ((l (list 0))) (ignore (-remove-at 0 l)) l) '(0)))
  (should (equal (let ((l (list 0))) (ignore (-remove-at 1 l)) l) '(0)))
  (should (equal (let ((l (list 0 1))) (ignore (-remove-at -1 l)) l) '(0 1)))
  (should (equal (let ((l (list 0 1))) (ignore (-remove-at 0 l)) l) '(0 1)))
  (should (equal (let ((l (list 0 1))) (ignore (-remove-at 1 l)) l) '(0 1)))
  (should (equal (let ((l (list 0 1))) (ignore (-remove-at 2 l)) l) '(0 1))))

(ert-deftest -remove-at-indices ()
  "-remove-at-indices"
  (should (equal (-remove-at-indices '(0) '(a b c d e)) '(b c d e)))
  (should (equal (-remove-at-indices '(1 3) '(a b c d e)) '(a c e)))
  (should (equal (-remove-at-indices '(4 0 2) '(a b c d e)) '(b d)))
  (should (equal (-remove-at-indices () ()) nil))
  (should (equal (-remove-at-indices '(-1) nil) nil))
  (should (equal (-remove-at-indices '(0) nil) nil))
  (should (equal (-remove-at-indices '(-1 0) nil) nil))
  (should (equal (-remove-at-indices '(0 -1) nil) nil))
  (should (equal (-remove-at-indices '(-1 -1) nil) nil))
  (should (equal (-remove-at-indices '(0 0) nil) nil))
  (should (equal (-remove-at-indices () '(a)) '(a)))
  (should (equal (-remove-at-indices '(-1) '(a)) '(a)))
  (should (equal (-remove-at-indices '(0) '(a)) nil))
  (should (equal (-remove-at-indices '(1) '(a)) '(a)))
  (should (equal (-remove-at-indices '(-1 -1) '(a)) '(a)))
  (should (equal (-remove-at-indices '(-1 0) '(a)) nil))
  (should (equal (-remove-at-indices '(0 -1) '(a)) nil))
  (should (equal (-remove-at-indices '(-1 1) '(a)) '(a)))
  (should (equal (-remove-at-indices '(1 -1) '(a)) '(a)))
  (should (equal (-remove-at-indices '(0 0) '(a)) nil))
  (should (equal (-remove-at-indices '(0 1) '(a)) nil))
  (should (equal (-remove-at-indices '(1 0) '(a)) nil))
  (should (equal (-remove-at-indices '(1 1) '(a)) '(a)))
  (should (equal (-remove-at-indices () '(a b)) '(a b)))
  (should (equal (-remove-at-indices '(-1) '(a b)) '(a b)))
  (should (equal (-remove-at-indices '(0) '(a b)) '(b)))
  (should (equal (-remove-at-indices '(1) '(a b)) '(a)))
  (should (equal (-remove-at-indices '(2) '(a b)) '(a b)))
  (should (equal (-remove-at-indices '(-2 -1) '(a b)) '(a b)))
  (should (equal (-remove-at-indices '(-1 -1) '(a b)) '(a b)))
  (should (equal (-remove-at-indices '(-1 0) '(a b)) '(b)))
  (should (equal (-remove-at-indices '(0 -1) '(a b)) '(b)))
  (should (equal (-remove-at-indices '(-1 1) '(a b)) '(a)))
  (should (equal (-remove-at-indices '(1 -1) '(a b)) '(a)))
  (should (equal (-remove-at-indices '(-1 2) '(a b)) '(a b)))
  (should (equal (-remove-at-indices '(2 -1) '(a b)) '(a b)))
  (should (equal (-remove-at-indices '(0 0) '(a b)) '(b)))
  (should (equal (-remove-at-indices '(0 1) '(a b)) nil))
  (should (equal (-remove-at-indices '(1 0) '(a b)) nil))
  (should (equal (-remove-at-indices '(0 2) '(a b)) '(b)))
  (should (equal (-remove-at-indices '(2 0) '(a b)) '(b)))
  (should (equal (-remove-at-indices '(1 1) '(a b)) '(a)))
  (should (equal (-remove-at-indices '(1 2) '(a b)) '(a)))
  (should (equal (-remove-at-indices '(2 1) '(a b)) '(a)))
  (should (equal (-remove-at-indices '(2 2) '(a b)) '(a b)))
  (should (equal (-remove-at-indices '(-1 0 0) '(a b)) '(b)))
  (should (equal (-remove-at-indices '(-1 0 1) '(a b)) nil))
  (should (equal (-remove-at-indices '(-1 1 1) '(a b)) '(a)))
  (should (equal (-remove-at-indices '(1 -1 0) '(a b)) nil))
  (should (equal (-remove-at-indices '(-1 -2 -3) '(a b)) '(a b)))
  (should (equal (-remove-at-indices '(4 3 2) '(a b)) '(a b)))
  (should (equal (-remove-at-indices '(0 0 0) '(a b)) '(b)))
  (should (equal (-remove-at-indices '(1 1 1) '(a b)) '(a)))
  (should (equal (-remove-at-indices nil '(a b c)) '(a b c)))
  (should (equal (-remove-at-indices '(-1) '(a b c)) '(a b c)))
  (should (equal (-remove-at-indices '(3) '(a b c)) '(a b c)))
  (should (equal (-remove-at-indices '(-1 -1) '(a b c)) '(a b c)))
  (should (equal (-remove-at-indices '(-1 0) '(a b c)) '(b c)))
  (should (equal (-remove-at-indices '(0 -1) '(a b c)) '(b c)))
  (should (equal (-remove-at-indices '(-1 1) '(a b c)) '(a c)))
  (should (equal (-remove-at-indices '(1 -1) '(a b c)) '(a c)))
  (should (equal (-remove-at-indices '(-1 2) '(a b c)) '(a b)))
  (should (equal (-remove-at-indices '(2 -1) '(a b c)) '(a b)))
  (should (equal (-remove-at-indices '(-1 3) '(a b c)) '(a b c)))
  (should (equal (-remove-at-indices '(3 -1) '(a b c)) '(a b c)))
  (should (equal (-remove-at-indices '(-1 -2) '(a b c)) '(a b c)))
  (should (equal (-remove-at-indices '(3 3) '(a b c)) '(a b c)))
  (should (equal (-remove-at-indices '(4 3) '(a b c)) '(a b c)))
  (should (equal (-remove-at-indices '(2 -1 0) '(a b c)) '(b)))
  (should (equal (-remove-at-indices '(3 -1 2 1) '(a b c)) '(a)))
  (should (equal (-remove-at-indices '(3 0 -1 1) '(a b c)) '(c)))
  (should (equal (-remove-at-indices '(2 2 0 0) '(a b c)) '(b)))
  (should (equal (-remove-at-indices '(0 0 2) '(a b c)) '(b)))
  (should (equal (-remove-at-indices '(0) '(0 1 2 3 4 5)) '(1 2 3 4 5)))
  (should (equal (-remove-at-indices '(0 2 4) '(0 1 2 3 4 5)) '(1 3 5)))
  (should (equal (-remove-at-indices '(0 5) '(0 1 2 3 4 5)) '(1 2 3 4)))
  (should (equal (-remove-at-indices '(1 2 3) '(0 1 2 3 4 5)) '(0 4 5)))
  (should (equal (-remove-at-indices '(0 1 2 3 4 5) '(0 1 2 3 4 5)) nil))
  (should (equal (-remove-at-indices '(2 0 4) '(0 1 2 3 4 5)) '(1 3 5)))
  (should (equal (-remove-at-indices '(5 0) '(0 1 2 3 4 5)) '(1 2 3 4)))
  (should (equal (-remove-at-indices '(1 3 2) '(0 1 2 3 4 5)) '(0 4 5)))
  (should (equal (-remove-at-indices '(0 3 4 2 5 1) '(0 1 2 3 4 5)) nil))
  (should (equal (-remove-at-indices '(1) '(0 1 2 3 4 5)) '(0 2 3 4 5)))
  (should (equal (-remove-at-indices '(2) '(0 1 2 3 4 5)) '(0 1 3 4 5)))
  (should (equal (-remove-at-indices '(3) '(0 1 2 3 4 5)) '(0 1 2 4 5)))
  (should (equal (-remove-at-indices '(4) '(0 1 2 3 4 5)) '(0 1 2 3 5)))
  (should (equal (-remove-at-indices '(5) '(0 1 2 3 4 5)) '(0 1 2 3 4)))
  (should (equal (-remove-at-indices '(1 2 4) '((a b) (c d) (e f g) h i ((j) k) l (m)))
		 '((a b) h ((j) k) l (m))))
  (should (equal (-remove-at-indices '(5) '((a b) (c d) (e f g) h i ((j) k) l (m)))
		 '((a b) (c d) (e f g) h i l (m))))
  (should (equal (-remove-at-indices '(0) '(((a b) (c d) (e f g) h i ((j) k) l (m))))
		 nil))
  (should (equal (-remove-at-indices '(2 3) '((0) (1) (2) (3) (4) (5) (6)))
		 '((0) (1) (4) (5) (6))))
  ;; Test for destructive modification.
  (should (equal (let ((l (list 0))) (ignore (-remove-at-indices '(0) l)) l) '(0)))
  (should (equal (let ((l (list 0 1))) (ignore (-remove-at-indices '(0) l)) l) '(0 1)))
  (should (equal (let ((l (list 0 1))) (ignore (-remove-at-indices '(1) l)) l) '(0 1)))
  (should (equal (let ((l (list 0 1))) (ignore (-remove-at-indices '(0 1) l)) l) '(0 1)))
  (should (equal (let ((l (list 0 1 2))) (ignore (-remove-at-indices '(0) l)) l)
		 '(0 1 2)))
  (should (equal (let ((l (list 0 1 2))) (ignore (-remove-at-indices '(1) l)) l)
		 '(0 1 2)))
  (should (equal (let ((l (list 0 1 2))) (ignore (-remove-at-indices '(2) l)) l)
		 '(0 1 2)))
  (should (equal (let ((l (list 0 1 2))) (ignore (-remove-at-indices '(0 0) l)) l)
		 '(0 1 2)))
  (should (equal (let ((l (list 0 1 2))) (ignore (-remove-at-indices '(0 1) l)) l)
		 '(0 1 2)))
  (should (equal (let ((l (list 0 1 2))) (ignore (-remove-at-indices '(0 2) l)) l)
		 '(0 1 2)))
  (should (equal (let ((l (list 0 1 2))) (ignore (-remove-at-indices '(1 1) l)) l)
		 '(0 1 2)))
  (should (equal (let ((l (list 0 1 2))) (ignore (-remove-at-indices '(1 2) l)) l)
		 '(0 1 2)))
  (should (equal (let ((l (list 0 1 2))) (ignore (-remove-at-indices '(2 2) l)) l)
		 '(0 1 2))))

(ert-deftest -reduce-from ()
  "-reduce-from --reduce-from"
  (should (equal (-reduce-from #'- 10 '(1 2 3)) 4))
  (should (equal (-reduce-from #'list 10 '(1 2 3)) '(((10 1) 2) 3)))
  (should (equal (--reduce-from (concat acc " " it) "START" '("a" "b" "c"))
		 "START a b c"))
  (should (equal (--reduce-from (- acc it) 10 '(1 2 3)) 4))
  (should (equal (--reduce-from (- acc it) 10 '(1)) 9))
  (should (equal (--reduce-from (- acc it) 10 nil) 10))
  (should (equal (-reduce-from #'- 7 '(1)) 6))
  (should (equal (-reduce-from #'- 7 nil) 7))
  (should (equal (--reduce-from (list acc it-index) nil '(1 2 3)) '(((nil 0) 1) 2)))
  (should (equal (--reduce-from t nil '(1 2 3)) t)))

(ert-deftest -reduce-r-from ()
  "-reduce-r-from --reduce-r-from"
  (should (equal (-reduce-r-from #'- 10 '(1 2 3)) -8))
  (should (equal (-reduce-r-from #'list 10 '(1 2 3)) '(1 (2 (3 10)))))
  (should (equal (--reduce-r-from (concat it " " acc) "END" '("a" "b" "c")) "a b c END"))
  (should (equal (--reduce-r-from (- it acc) 10 '(1 2 3)) -8))
  (should (equal (--reduce-r-from (- it acc) 10 '(1)) -9))
  (should (equal (--reduce-r-from (- it acc) 10 nil) 10))
  (should (equal (-reduce-r-from #'- 7 '(1)) -6))
  (should (equal (-reduce-r-from #'- 7 nil) 7))
  (should (equal (--reduce-r-from (list acc it-index) nil '(1 2 3)) '(((nil 2) 1) 0)))
  (should (equal (--reduce-r-from t nil '(1 2 3)) t)))

(ert-deftest -reduce ()
  "-reduce --reduce"
  (should (equal (-reduce #'- '(1 2 3 4)) -8))
  (should (equal (-reduce #'list '(1 2 3 4)) '(((1 2) 3) 4)))
  (should (equal (--reduce (format "%s-%d" acc it) '(1 2 3)) "1-2-3"))
  (should (equal (-reduce #'- nil) 0))
  (should (equal (-reduce #'- '(1)) 1))
  (should (equal (--reduce (- acc it) '(1)) 1))
  (should (equal (--reduce (list acc it) nil) '(nil nil)))
  (should (equal (--reduce t '(1 2)) t))
  (should (equal (-reduce #'vector nil) []))
  (should (equal (-reduce #'vector '(1)) 1))
  (should (equal (-reduce #'vector '(1 2)) [1 2])))

(ert-deftest -reduce-r ()
  "-reduce-r --reduce-r"
  (should (equal (-reduce-r #'- '(1 2 3 4)) -2))
  (should (equal (-reduce-r #'list '(1 2 3 4)) '(1 (2 (3 4)))))
  (should (equal (--reduce-r (format "%s-%d" acc it) '(1 2 3)) "3-2-1"))
  (should (equal (-reduce-r #'+ nil) 0))
  (should (equal (-reduce-r #'- '(1)) 1))
  (should (equal (--reduce (- it acc) '(1)) 1))
  (should (equal (--reduce-r (list it acc) nil) '(nil nil)))
  (should (equal (--reduce-r t '(1 2)) t))
  (should (equal (-reduce-r #'vector nil) []))
  (should (equal (-reduce-r #'vector '(1)) 1))
  (should (equal (-reduce-r #'vector '(1 2)) [1 2])))

(ert-deftest -reductions-from ()
  "-reductions-from --reductions-from"
  (should (equal (-reductions-from #'max 0 '(2 1 4 3)) '(0 2 2 4 4)))
  (should (equal (-reductions-from #'* 1 '(1 2 3 4)) '(1 1 2 6 24)))
  (should (equal (--reductions-from (format "(FN %s %d)" acc it) "INIT" '(1 2 3))
		 '("INIT" "(FN INIT 1)" "(FN (FN INIT 1) 2)"
		   "(FN (FN (FN INIT 1) 2) 3)")))
  (should (equal (-reductions-from #'- 10 '(1)) '(10 9)))
  (should (equal (-reductions-from #'- 10 nil) '(10)))
  (should (equal (--reductions-from (- acc it) 10 '(1)) '(10 9)))
  (should (equal (--reductions-from (- acc it) 10 nil) '(10)))
  (should (equal (--reductions-from t 10 '(1 2 3)) '(10 t t t)))
  (should (equal (--reductions-from (list acc it-index) nil '(1 2 3))
		 '(nil (nil 0) ((nil 0) 1) (((nil 0) 1) 2)))))

(ert-deftest -reductions-r-from ()
  "-reductions-r-from --reductions-r-from"
  (should (equal (-reductions-r-from #'max 0 '(2 1 4 3)) '(4 4 4 3 0)))
  (should (equal (-reductions-r-from #'* 1 '(1 2 3 4)) '(24 24 12 4 1)))
  (should (equal (--reductions-r-from (format "(FN %d %s)" it acc) "INIT" '(1 2 3))
		 '("(FN 1 (FN 2 (FN 3 INIT)))" "(FN 2 (FN 3 INIT))"
		   "(FN 3 INIT)" "INIT")))
  (should (equal (-reductions-r-from #'- 10 '(1)) '(-9 10)))
  (should (equal (-reductions-r-from #'- 10 nil) '(10)))
  (should (equal (--reductions-r-from (- acc it) 10 '(1)) '(9 10)))
  (should (equal (--reductions-r-from (- acc it) 10 nil) '(10)))
  (should (equal (--reductions-r-from t 10 '(1 2 3)) '(t t t 10)))
  (should (equal (--reductions-r-from (list acc it-index) nil '(1 2 3))
		 '((((nil 2) 1) 0) ((nil 2) 1) (nil 2) nil))))

(ert-deftest -reductions ()
  "-reduction --reductions"
  (should (equal (-reductions #'+ '(1 2 3 4)) '(1 3 6 10)))
  (should (equal (-reductions #'* '(1 2 3 4)) '(1 2 6 24)))
  (should (equal (--reductions (format "(FN %s %d)" acc it) '(1 2 3))
		 '(1 "(FN 1 2)" "(FN (FN 1 2) 3)")))
  (should (equal (-reductions #'- '(1)) '(1)))
  (should (equal (-reductions #'- nil) '(0)))
  (should (equal (-reductions #'vector nil) '([])))
  (should (equal (-reductions #'vector '(1)) '(1)))
  (should (equal (-reductions #'vector '(1 2)) '(1 [1 2])))
  (should (equal (--reductions t '(1 2 3)) '(1 t t)))
  (should (equal (--reductions (list it acc) nil) '((nil nil))))
  (should (equal (--reductions (list it acc) '(1)) '(1))))

(ert-deftest -reductions-r ()
  "-reductions-r --reductions-r"
  (should (equal (-reductions-r #'+ '(1 2 3 4)) '(10 9 7 4)))
  (should (equal (-reductions-r #'* '(1 2 3 4)) '(24 24 12 4)))
  (should (equal (--reductions-r (format "(FN %d %s)" it acc) '(1 2 3))
		 '("(FN 1 (FN 2 3))" "(FN 2 3)" 3)))
  (should (equal (-reductions-r #'- '(1)) '(1)))
  (should (equal (-reductions-r #'- nil) '(0)))
  (should (equal (-reductions-r #'vector nil) '([])))
  (should (equal (-reductions-r #'vector '(1)) '(1)))
  (should (equal (-reductions-r #'vector '(1 2)) '([1 2] 2)))
  (should (equal (--reductions-r t '(1 2 3)) '(t t 3)))
  (should (equal (--reductions-r (list it acc) nil) '((nil nil))))
  (should (equal (--reductions-r (list it acc) '(1)) '(1))))

(ert-deftest -count ()
  "-count --count"
  (should (equal (-count 'cl-evenp '(1 2 3 4 5)) 2))
  (should (equal (--count (< it 4) '(1 2 3 4)) 3)))

(ert-deftest -sum ()
  "-sum"
  (should (equal (-sum 'nil) 0))
  (should (equal (-sum '(1)) 1))
  (should (equal (-sum '(1 2 3 4)) 10)))

(ert-deftest -running-sum ()
  "-running-sum"
  (should (equal (-running-sum '(1 2 3 4)) '(1 3 6 10)))
  (should (equal (-running-sum '(1)) '(1)))
  (should (equal (should-error (-running-sum 'nil))
		 '(wrong-type-argument consp nil))))

(ert-deftest -product ()
  "-product"
  (should (equal (-product 'nil) 1))
  (should (equal (-product '(1)) 1))
  (should (equal (-product '(1 2 3 4)) 24)))

(ert-deftest -running-product ()
  "-running-product"
  (should (equal (-running-product '(1 2 3 4)) '(1 2 6 24)))
  (should (equal (-running-product '(1)) '(1)))
  (should (equal (should-error (-running-product 'nil))
		 '(wrong-type-argument consp nil))))

(ert-deftest -inits ()
  "-inits"
  (should (equal (-inits '(1 2 3 4)) '(nil (1) (1 2) (1 2 3) (1 2 3 4))))
  (should (equal (-inits nil) '(nil)))
  (should (equal (-inits '(1)) '(nil (1)))))

(ert-deftest -tails ()
  "-tails"
  (should (equal (-tails '(1 2 3 4)) '((1 2 3 4) (2 3 4) (3 4) (4) nil)))
  (should (equal (-tails nil) '(nil)))
  (should (equal (-tails '(1)) '((1) nil))))

(ert-deftest -common-prefix ()
  "-common-prefix"
  (should (equal (-common-prefix '(1)) '(1)))
  (should (equal (-common-prefix '(1 2) '(3 4) '(1 2)) 'nil))
  (should (equal (-common-prefix '(1 2) '(1 2 3) '(1 2 3 4)) '(1 2)))
  (should (equal (-common-prefix nil '(1 2) '(1 2)) nil))
  (should (equal (-common-prefix '(1 2) '(1 2) nil) nil))
  (should (equal (-common-prefix '(1) '(1)) '(1)))
  (should (equal (-common-prefix '(nil)) '(nil)))
  (should (equal (-common-prefix nil nil) nil))
  (should (equal (-common-prefix nil) nil))
  (should (equal (-common-prefix) nil)))

(ert-deftest -common-suffix ()
  "-common-suffix"
  (should (equal (-common-suffix '(1)) '(1)))
  (should (equal (-common-suffix '(1 2) '(3 4) '(1 2)) 'nil))
  (should (equal (-common-suffix '(1 2 3 4) '(2 3 4) '(3 4)) '(3 4)))
  (should (equal (-common-suffix nil '(1 2) '(1 2)) nil))
  (should (equal (-common-suffix '(1 2) '(1 2) nil) nil))
  (should (equal (-common-suffix '(1) '(1)) '(1)))
  (should (equal (-common-suffix '(nil)) '(nil)))
  (should (equal (-common-suffix nil nil) nil))
  (should (equal (-common-suffix nil) nil))
  (should (equal (-common-suffix) nil)))

(ert-deftest -min ()
  "-min"
  (should (equal (-min '(0)) 0))
  (should (equal (-min '(3 2 1)) 1))
  (should (equal (-min '(1 2 3)) 1)))

(ert-deftest -min-by ()
  "-min-by --min-by"
  (should (equal (-min-by '> '(4 3 6 1)) 1))
  (should (equal (--min-by (> (car it) (car other)) '((1 2 3) (2) (3 2))) '(1 2 3)))
  (should (equal (--min-by (> (length it) (length other)) '((1 2 3) (2) (3 2))) '(2))))

(ert-deftest -max ()
  "-max"
  (should (equal (-max '(0)) 0))
  (should (equal (-max '(3 2 1)) 3))
  (should (equal (-max '(1 2 3)) 3)))

(ert-deftest -max-by ()
  "-max-by --max-by"
  (should (equal (-max-by '> '(4 3 6 1)) 6))
  (should (equal (--max-by (> (car it) (car other)) '((1 2 3) (2) (3 2))) '(3 2)))
  (should (equal (--max-by (> (length it) (length other)) '((1 2 3) (2) (3 2)))
		 '(1 2 3))))

(ert-deftest -frequencies ()
  "-frequencies"
  (should (equal (-frequencies 'nil) 'nil))
  (should (equal (-frequencies '(1 2 3 1 2 1)) '((1 . 3) (2 . 2) (3 . 1))))
  (should (equal (let ((-compare-fn #'string=)) (-frequencies '(a "a"))) '((a . 2))))
  (should (equal (let ((-compare-fn #'string=)) (-frequencies '("a" a))) '(("a" . 2))))
  (should (equal (-frequencies '(1)) '((1 . 1))))
  (should (equal (-frequencies '(1 1)) '((1 . 2))))
  (should (equal (-frequencies '(2 1 1)) '((2 . 1) (1 . 2))))
  (should (equal (let ((-compare-fn #'eq) (a (string 97)))
		   (-frequencies `(,a ,(string 97) ,a)))
		 '(("a" . 2) ("a" . 1))))
  (should (equal (let ((-compare-fn #'eq) (a (string 97)))
		   (-frequencies `(,(string 97) ,a ,a)))
		 '(("a" . 1) ("a" . 2)))))

(ert-deftest -iterate ()
  "-iterate --iterate"
  (should (equal (-iterate #'1+ 1 10) '(1 2 3 4 5 6 7 8 9 10)))
  (should (equal (-iterate (lambda (x) (+ x x)) 2 5) '(2 4 8 16 32)))
  (should (equal (--iterate (* it it) 2 5) '(2 4 16 256 65536)))
  (should (equal (-iterate #'1+ 1 0) nil))
  (should (equal (-iterate #'1+ 1 -1) nil))
  (should (equal (-iterate #'ignore 1 1) '(1)))
  (should (equal (-iterate #'ignore 1 3) '(1 nil nil)))
  (should (equal (--iterate nil nil 0) nil))
  (should (equal (--iterate nil nil 1) '(nil)))
  (should (equal (--iterate nil nil 2) '(nil nil)))
  (should (equal (--iterate (setq it -1) 1 3) '(1 -1 -1)))
  (should (equal (let (l) (ignore (--iterate (push 1 l) (push 0 l) -1)) l) nil))
  (should (equal (let (l) (ignore (--iterate (push 1 l) (push 0 l) 0)) l) nil))
  (should (equal (let (l) (ignore (--iterate (push 1 l) (push 0 l) 1)) l) '(0)))
  (should (equal (let (l) (ignore (--iterate (push 1 l) (push 0 l) 2)) l) '(1 0))))

(ert-deftest -unfold ()
  "-unfold --unfold"
  (should (equal (-unfold (lambda (x) (unless (= x 0) (cons x (1- x)))) 10)
		 '(10 9 8 7 6 5 4 3 2 1)))
  (should (equal (--unfold (when it (cons it (cdr it))) '(1 2 3 4))
		 '((1 2 3 4) (2 3 4) (3 4) (4))))
  (should (equal (--unfold (when it (cons it (butlast it))) '(1 2 3 4))
		 '((1 2 3 4) (1 2 3) (1 2) (1)))))

(ert-deftest -repeat ()
  "-repeat"
  (should (equal (-repeat 3 :a) '(:a :a :a)))
  (should (equal (-repeat 1 :a) '(:a)))
  (should (equal (-repeat 0 :a) 'nil))
  (should (equal (-repeat -1 :a) nil))
  (should (equal (-repeat -1 nil) nil))
  (should (equal (-repeat 0 nil) nil))
  (should (equal (-repeat 1 nil) '(nil)))
  (should (equal (-repeat 2 nil) '(nil nil))))

(ert-deftest -cycle ()
  "-cycle"
  (should (equal (-take 5 (-cycle '(1 2 3))) '(1 2 3 1 2)))
  (should (equal (-take 7 (-cycle '(1 "and" 3))) '(1 "and" 3 1 "and" 3 1)))
  (should (equal (-zip-lists (-cycle '(3)) '(1 2)) '((3 1) (3 2))))
  (should (equal (-zip-with #'cons (-cycle '(3)) '(1 2)) '((3 . 1) (3 . 2))))
  (should (equal (--map (-take 5 it) (-split-at 5 (-cycle '(1 2 3))))
		 '((1 2 3 1 2) (3 1 2 3 1))))
  (should (equal (let ((l (list 1))) (eq l (-cycle l))) nil)))

(ert-deftest -some ()
  "-some --some"
  (should (equal (-some #'stringp '(1 "2" 3)) t))
  (should (equal (--some (string-match-p "x" it) '("foo" "axe" "xor")) 1))
  (should (equal (--some (= it-index 3) '(0 1 2)) nil))
  (should (equal (-some (lambda (s) (string-match-p "x" s)) '("foo" "bar" "baz")) nil))
  (should (equal (--some (member 'foo it) '((foo bar) (baz))) '(foo bar)))
  (should (equal (--some (plist-get it :bar) '((:foo 1 :bar 2) (:baz 3))) 2))
  (should (equal (-some #'null '(1 2 3)) nil))
  (should (equal (-some #'null '(1)) nil))
  (should (equal (-some #'null 'nil) nil))
  (should (equal (--some (not it) '(1 2 3)) nil))
  (should (equal (--some (not it) '(1)) nil))
  (should (equal (--some (not it) 'nil) nil))
  (should (equal (-some #'identity '(1 2 3)) 1))
  (should (equal (-some #'identity '(1)) 1))
  (should (equal (-some #'identity 'nil) nil))
  (should (equal (--some it '(1 2 3)) 1))
  (should (equal (--some it '(1)) 1))
  (should (equal (--some it 'nil) nil)))

(ert-deftest -every ()
  "-every --every"
  (should (equal (-every #'numberp '(1 2 3)) t))
  (should (equal (--every (string-match-p "x" it) '("axe" "xor")) 0))
  (should (equal (--every (= it it-index) '(0 1 3)) nil))
  (should (equal (-every #'ignore 'nil) t))
  (should (equal (-every #'ignore '(0)) nil))
  (should (equal (-every #'ignore '(0 1)) nil))
  (should (equal (--every nil 'nil) t))
  (should (equal (--every nil '(0)) nil))
  (should (equal (--every nil '(0 1)) nil))
  (should (equal (-every #'identity 'nil) t))
  (should (equal (-every #'identity '(0)) 0))
  (should (equal (-every #'identity '(0 1)) 1))
  (should (equal (--every it 'nil) t))
  (should (equal (--every it '(1)) 1))
  (should (equal (--every it '(1 2)) 2))
  (should (equal (--every it-index 'nil) t))
  (should (equal (--every it-index '(1)) 0))
  (should (equal (--every it-index '(1 2)) 1))
  (should (equal (let ((r 'r)) (ignore (-every (lambda (x) (setq r x)) 'nil)) r) 'r))
  (should (equal (let ((r 'r)) (ignore (-every (lambda (x) (setq r x)) '(nil 1))) r) nil))
  (should (equal (let (r) (ignore (-every (lambda (x) (setq r x)) '(0 1))) r) 1))
  (should (equal (let (i) (--every (ignore (setq i it-index)) 'nil) i) nil))
  (should (equal (let (i) (--every (ignore (setq i it-index)) '(a)) i) 0))
  (should (equal (let (i) (--every (ignore (setq i it-index)) '(a b)) i) 0)))

(ert-deftest -any? ()
  "-any? --any?"
  (should (equal (-any? #'numberp '(nil 0 t)) t))
  (should (equal (-any? #'numberp '(nil t t)) nil))
  (should (equal (-any? #'null '(1 3 5)) nil))
  (should (equal (-any? #'null '(1 3 nil)) t))
  (should (equal (-any? #'identity 'nil) nil))
  (should (equal (-any? #'identity '(0)) t))
  (should (equal (-any? #'identity '(nil)) nil))
  (should (equal (--any? (= 0 (% it 2)) '(1 2 3)) t))
  (should (equal (--any? (= it it-index) 'nil) nil))
  (should (equal (--any? (= it it-index) '(0)) t))
  (should (equal (--any? (= it it-index) '(1)) nil))
  (should (equal (--any? (= it it-index) '(1 1)) t))
  (should (equal (--any? (= it it-index) '(1 2)) nil)))

(ert-deftest -all? ()
  "-all? --all?"
  (should (equal (-all? #'numberp '(1 2 3)) t))
  (should (equal (-all? #'numberp '(2 t 6)) nil))
  (should (equal (--all? (= 0 (% it 2)) '(2 4 6)) t))
  (should (equal (-all? #'identity 'nil) t))
  (should (equal (-all? #'identity '(0)) t))
  (should (equal (-all? #'identity '(0 1)) t))
  (should (equal (-all? #'identity '(nil)) nil))
  (should (equal (--all? (= it it-index) 'nil) t))
  (should (equal (--all? (= it it-index) '(0)) t))
  (should (equal (--all? (= it it-index) '(1)) nil))
  (should (equal (--all? (= it it-index) '(1 1)) nil))
  (should (equal (--all? (= it it-index) '(0 1)) t)))

(ert-deftest -none? ()
  "-none? --none?"
  (should (equal (-none? 'cl-evenp '(1 2 3)) nil))
  (should (equal (-none? 'cl-evenp '(1 3 5)) t))
  (should (equal (--none? (= 0 (% it 2)) '(1 2 3)) nil)))

(ert-deftest -only-some? ()
  "-only-some? --only-some?"
  (should (equal (-only-some? 'cl-evenp '(1 2 3)) t))
  (should (equal (-only-some? 'cl-evenp '(1 3 5)) nil))
  (should (equal (-only-some? 'cl-evenp '(2 4 6)) nil))
  (should (equal (--only-some? (> it 2) '(1 2 3)) t)))

(ert-deftest -contains? ()
  "-contains"
  (should (equal (-contains? '(1 2 3) 1) '(1 2 3)))
  (should (equal (-contains? '(1 2 3) 2) '(2 3)))
  (should (equal (-contains? '(1 2 3) 4) 'nil))
  (should (equal (-contains? 'nil 1) 'nil))
  (should (equal (-contains? 'nil 'nil) 'nil))
  (should (equal (-contains? `(,(string 97)) "a") '("a")))
  (should (equal (-contains? '(a a) 'a) '(a a)))
  (should (equal (-contains? '(b b a a) 'a) '(a a)))
  (should (equal (-contains? '(a a b b) 'a) '(a a b b)))
  (should (equal (let ((-compare-fn #'eq)) (-contains? `(,(string 97)) "a")) 'nil))
  (should (equal (let ((-compare-fn #'string=)) (-contains? '(a) 'b)) 'nil))
  (should (equal (let ((-compare-fn #'string=)) (-contains? '(a) "a")) '(a)))
  (should (equal (let ((-compare-fn #'string=)) (-contains? '("a") 'a)) '("a")))
  (should (equal (let ((-compare-fn #'string=)) (-contains? '(a "a") 'a)) '(a "a")))
  (should (equal (let ((-compare-fn #'string=)) (-contains? '("a" a) 'a)) '("a" a))))

(ert-deftest -is-prefix? ()
  "-is-prefix?"
  (should (equal (-is-prefix? '(1 2 3) '(1 2 3 4 5)) t))
  (should (equal (-is-prefix? '(1 2 3 4 5) '(1 2 3)) nil))
  (should (equal (-is-prefix? '(1 3) '(1 2 3 4 5)) nil))
  (should (equal (-is-prefix? '(1 2 3) '(1 2 4 5)) nil))
  (should (equal (-is-prefix? '(1 2 3) '(1 2)) nil))
  (should (equal (-is-prefix? '(1 2) '(1 2)) t))
  (should (equal (-is-prefix? '(1) '(1 2)) t))
  (should (equal (-is-prefix? '(1) '(1)) t))
  (should (equal (-is-prefix? 'nil '(1)) t))
  (should (equal (-is-prefix? 'nil 'nil) t))
  (should (equal (-is-prefix? 'nil '(nil)) t))
  (should (equal (-is-prefix? '(nil) '(nil)) t))
  (should (equal (-is-prefix? '(nil) 'nil) nil))
  (should (equal (-is-prefix? '(2 3) '(1 2 3)) nil))
  (should (equal (let* ((p (list 1 2)) (l p) (c (copy-sequence p)))
		   (and (-is-prefix? p l) (equal p c) (equal l c)))
		 t)))

(ert-deftest -is-suffix? ()
  "-is-suffix?"
  (should (equal (-is-suffix? '(3 4 5) '(1 2 3 4 5)) t))
  (should (equal (-is-suffix? '(1 2 3 4 5) '(3 4 5)) nil))
  (should (equal (-is-suffix? '(3 5) '(1 2 3 4 5)) nil))
  (should (equal (-is-suffix? '(3 4 5) '(1 2 3 5)) nil))
  (should (equal (-is-suffix? '(1 2 3) '(2 3)) nil))
  (should (equal (-is-suffix? '(1 2) '(1 2)) t))
  (should (equal (-is-suffix? '(2) '(1 2)) t))
  (should (equal (-is-suffix? '(1) '(1)) t))
  (should (equal (-is-suffix? 'nil '(1)) t))
  (should (equal (-is-suffix? 'nil 'nil) t))
  (should (equal (-is-suffix? 'nil '(nil)) t))
  (should (equal (-is-suffix? '(nil) '(nil)) t))
  (should (equal (-is-suffix? '(nil) 'nil) nil))
  (should (equal (-is-suffix? '(1 2) '(1 2 3)) nil))
  (should (equal (-is-suffix? '(1 2) '(1 2 1 2)) t))
  (should (equal (-is-suffix? '(1 2) '(1 3 1 2)) t))
  (should (equal (let* ((s (list 1 2)) (l s) (c (copy-sequence s)))
		   (and (-is-suffix? s l) (equal s c) (equal l c)))
		 t)))

(ert-deftest -is-infix? ()
  "-is-infix?"
  (should (equal (-is-infix? '(1 2 3) '(1 2 3 4 5)) t))
  (should (equal (-is-infix? '(2 3 4) '(1 2 3 4 5)) t))
  (should (equal (-is-infix? '(3 4 5) '(1 2 3 4 5)) t))
  (should (equal (-is-infix? '(2 3 4) '(1 2 4 5)) nil))
  (should (equal (-is-infix? '(2 4) '(1 2 3 4 5)) nil)))

(ert-deftest -cons-pair? ()
  "-cons-pair?"
  (should (equal (-cons-pair? '(1 . 2)) t))
  (should (equal (-cons-pair? '(1 2)) nil))
  (should (equal (-cons-pair? '(1)) nil))
  (should (equal (-cons-pair? nil) nil))
  (should (equal (-cons-pair? "") nil))
  (should (equal (-cons-pair? '(1 2 . 3)) nil))
  (should (equal (-cons-pair? '(nil . "")) t)))

(ert-deftest -split-at ()
  "-split-at"
  (should (equal (-split-at 3 '(1 2 3 4 5)) '((1 2 3) (4 5))))
  (should (equal (-split-at 17 '(1 2 3 4 5)) '((1 2 3 4 5) nil)))
  (should (equal (-split-at 0 '(1 2 3 4 5)) '(nil (1 2 3 4 5))))
  (should (equal (-split-at -1 nil) '(nil nil)))
  (should (equal (-split-at 0 nil) '(nil nil)))
  (should (equal (-split-at 1 nil) '(nil nil)))
  (should (equal (-split-at -1 '(1)) '(nil (1))))
  (should (equal (-split-at 0 '(1)) '(nil (1))))
  (should (equal (-split-at 1 '(1)) '((1) nil)))
  (should (equal (-split-at 2 '(1)) '((1) nil)))
  (should (equal (-split-at -1 '(1 2)) '(nil (1 2))))
  (should (equal (-split-at 1 '(1 2)) '((1) (2))))
  (should (equal (-split-at 2 '(1 2)) '((1 2) nil)))
  (should (equal (-split-at 3 '(1 2)) '((1 2) nil)))
  (should (equal (let* ((l (list 1 2)) (s (-split-at 1 l))) (eq (car s) l)) nil))
  (should (equal (let* ((l (list 1 2)) (s (-split-at 1 l))) (eq (cadr s) (cdr l))) t)))

(ert-deftest -split-with ()
  "-split-with --split-with"
  (should (equal (-split-with 'cl-evenp '(1 2 3 4)) '(nil (1 2 3 4))))
  (should (equal (-split-with 'cl-evenp '(2 4 5 6)) '((2 4) (5 6))))
  (should (equal (--split-with (< it 4) '(1 2 3 4 3 2 1)) '((1 2 3) (4 3 2 1)))))

(ert-deftest -split-on ()
  "-split-on"
  (should (equal (-split-on '| '(Nil | Leaf a | Node [Tree a]))
		 '((Nil) (Leaf a) (Node [Tree a]))))
  (should (equal (-split-on :endgroup '("a" "b" :endgroup "c" :endgroup "d" "e"))
		 '(("a" "b") ("c") ("d" "e"))))
  (should (equal (-split-on :endgroup '("a" "b" :endgroup :endgroup "d" "e"))
		 '(("a" "b") ("d" "e"))))
  (should (equal (-split-on :endgroup '("a" "b" :endgroup "c" :endgroup))
		 '(("a" "b") ("c"))))
  (should (equal (-split-on :endgroup '("a" "b" :endgroup :endgroup :endgroup "d" "e"))
		 '(("a" "b") ("d" "e"))))
  (should (equal (-split-on :endgroup '(:endgroup "c" :endgroup "d" "e"))
		 '(("c") ("d" "e"))))
  (should (equal (-split-on '| '(Nil | | Node [Tree a]))
		 '((Nil) (Node [Tree a])))))

(ert-deftest -split-when ()
  "-split-when --split-when"
  (should (equal (-split-when 'cl-evenp '(1 2 3 4 5 6)) '((1) (3) (5))))
  (should (equal (-split-when 'cl-evenp '(1 2 3 4 6 8 9)) '((1) (3) (9))))
  (should (equal (--split-when (memq it '(&optional &rest))
			       '(a b &optional c d &rest args))
		 '((a b) (c d) (args))))
  (should (equal (-split-when 'cl-evenp '(1 2 3 5 6)) '((1) (3 5))))
  (should (equal (-split-when 'cl-evenp '(1 2 3 5)) '((1) (3 5))))
  (should (equal (-split-when 'cl-evenp '(1 3 4 5 6)) '((1 3) (5))))
  (should (equal (-split-when 'cl-evenp '(1 2 3 4 5 6 8 10)) '((1) (3) (5))))
  (should (equal (-split-when 'cl-evenp '(1 2 3 5 7 6)) '((1) (3 5 7)))))

(ert-deftest -separate ()
  "-separate --sparate"
  (should (equal (-separate (lambda (num) (= 0 (% num 2))) '(1 2 3 4 5 6 7))
		 '((2 4 6) (1 3 5 7))))
  (should (equal (--separate (< it 5) '(3 7 5 9 3 2 1 4 6))
		 '((3 3 2 1 4) (7 5 9 6))))
  (should (equal (-separate 'cdr '((1 2) (1) (1 2 3) (4)))
		 '(((1 2) (1 2 3)) ((1) (4))))))

(ert-deftest -partition ()
  "-partition"
  (should (equal (-partition 2 '(1 2 3 4 5 6)) '((1 2) (3 4) (5 6))))
  (should (equal (-partition 2 '(1 2 3 4 5 6 7)) '((1 2) (3 4) (5 6))))
  (should (equal (-partition 3 '(1 2 3 4 5 6 7)) '((1 2 3) (4 5 6)))))

(ert-deftest -partition-all ()
  "-partition-all"
  (should (equal (-partition-all 2 '(1 2 3 4 5 6)) '((1 2) (3 4) (5 6))))
  (should (equal (-partition-all 2 '(1 2 3 4 5 6 7)) '((1 2) (3 4) (5 6) (7))))
  (should (equal (-partition-all 3 '(1 2 3 4 5 6 7)) '((1 2 3) (4 5 6) (7)))))

(ert-deftest -partition-in-steps ()
  "-partition-in-steps"
  (should (equal (-partition-in-steps 2 1 '(1 2 3 4)) '((1 2) (2 3) (3 4))))
  (should (equal (-partition-in-steps 3 2 '(1 2 3 4)) '((1 2 3))))
  (should (equal (-partition-in-steps 3 2 '(1 2 3 4 5)) '((1 2 3) (3 4 5))))
  (should (equal (-partition-in-steps 2 1 '(1)) 'nil))
  (should-error (-partition-in-steps 2 0 '(1)) :type 'wrong-type-argument)
  (should-error (-partition-in-steps 2 -1 '(1)) :type 'wrong-type-argument))

(ert-deftest -partition-all-in-steps ()
  "-partition-all-in-steps"
  (should (equal (-partition-all-in-steps 2 1 '(1 2 3 4)) '((1 2) (2 3) (3 4) (4))))
  (should (equal (-partition-all-in-steps 3 2 '(1 2 3 4)) '((1 2 3) (3 4))))
  (should (equal (-partition-all-in-steps 3 2 '(1 2 3 4 5)) '((1 2 3) (3 4 5) (5))))
  (should (equal (-partition-all-in-steps 4 2 '(0 1 2 3 4 5 6))
		 '((0 1 2 3) (2 3 4 5) (4 5 6) (6))))
  (should (equal (-partition-all-in-steps 2 1 '(1)) '((1))))
  (should-error (-partition-all-in-steps 2 0 '(1)) :type 'wrong-type-argument)
  (should-error (-partition-all-in-steps 2 -1 '(1)) :type 'wrong-type-argument))

(ert-deftest -partition-by ()
  "-partition-by --partition-by"
  (should (equal (-partition-by 'cl-evenp 'nil) 'nil))
  (should (equal (-partition-by 'cl-evenp '(1 1 2 2 2 3 4 6 8))
		 '((1 1) (2 2 2) (3) (4 6 8))))
  (should (equal (--partition-by (< it 3) '(1 2 3 4 3 2 1))
		 '((1 2) (3 4 3) (2 1)))))

(ert-deftest -partition-by-header ()
  "-partition-by-header --partiton-by-header"
  (should (equal (--partition-by-header (= it 1) '(1 2 3 1 2 1 2 3 4))
		 '((1 2 3) (1 2) (1 2 3 4))))
  (should (equal (--partition-by-header (> it 0) '(1 2 0 1 0 1 2 3 0))
		 '((1 2 0) (1 0) (1 2 3 0))))
  (should (equal (-partition-by-header 'cl-evenp '(2 1 1 1 4 1 3 5 6 6 1))
		 '((2 1 1 1) (4 1 3 5) (6 6 1)))))

(ert-deftest -partition-after-pred ()
  "-partition-after-pred --partition-after-pred"
  (should (equal (-partition-after-pred #'booleanp 'nil) 'nil))
  (should (equal (-partition-after-pred #'booleanp '(t t)) '((t) (t))))
  (should (equal (-partition-after-pred #'booleanp '(0 0 t t 0 t))
		 '((0 0 t) (t) (0 t))))
  (should (equal (-partition-after-pred #'booleanp '(t)) '((t))))
  (should (equal (-partition-after-pred #'booleanp '(0 t)) '((0 t))))
  (should (equal (--partition-after-pred (= (% it 2) 0) 'nil) 'nil))
  (should (equal (--partition-after-pred (= (mod it 2) 1) 'nil) 'nil))
  (should (equal (--partition-after-pred (= (% it 2) 0) '(0)) '((0))))
  (should (equal (--partition-after-pred (= (mod it 2) 1) '(0)) '((0))))
  (should (equal (--partition-after-pred (= (% it 2) 0) '(0 1)) '((0) (1))))
  (should (equal (--partition-after-pred (= (mod it 2) 1) '(0 1)) '((0 1))))
  (should (equal (--partition-after-pred (= (% it 2) 0) '(0 1 2)) '((0) (1 2))))
  (should (equal (--partition-after-pred (= (mod it 2) 1) '(0 1 2)) '((0 1) (2))))
  (should (equal (--partition-after-pred (= (% it 2) 0) '(0 1 2 3)) '((0) (1 2) (3))))
  (should (equal (--partition-after-pred (= (mod it 2) 1) '(0 1 2 3)) '((0 1) (2 3))))
  (should (equal (--partition-after-pred t 'nil) nil))
  (should (equal (--partition-after-pred t '(0)) '((0))))
  (should (equal (--partition-after-pred t '(0 1)) '((0) (1))))
  (should (equal (--partition-after-pred t '(0 1 2)) '((0) (1) (2))))
  (should (equal (--partition-after-pred nil 'nil) 'nil))
  (should (equal (--partition-after-pred nil '(0)) '((0))))
  (should (equal (--partition-after-pred nil '(0 1)) '((0 1))))
  (should (equal (--partition-after-pred nil '(0 1 2)) '((0 1 2)))))

(ert-deftest -partition-before-pred ()
  "-partition-before-pred"
  (should (equal (-partition-before-pred #'booleanp 'nil) 'nil))
  (should (equal (-partition-before-pred #'booleanp '(0 t)) '((0) (t))))
  (should (equal (-partition-before-pred #'booleanp '(0 0 t 0 t t))
		 '((0 0) (t 0) (t) (t))))
  (should (equal (-partition-before-pred #'booleanp '(t)) '((t))))
  (should (equal (-partition-before-pred #'booleanp '(t t)) '((t) (t))))
  (should (equal (-partition-before-pred #'booleanp '(0 t 0)) '((0) (t 0)))))

(ert-deftest -partition-before-item ()
  "-partition-before-item"
  (should (equal (-partition-before-item 3 'nil) 'nil))
  (should (equal (-partition-before-item 3 '(1)) '((1))))
  (should (equal (-partition-before-item 3 '(3)) '((3))))
  (should (equal (-partition-before-item 3 '(1 3)) '((1) (3))))
  (should (equal (-partition-before-item 3 '(1 3 4)) '((1) (3 4))))
  (should (equal (-partition-before-item 3 '(1 2 3 2 3 3 4))
		 '((1 2) (3 2) (3) (3 4)))))

(ert-deftest -partition-after-item ()
  "-partition-after-item"
  (should (equal (-partition-after-item 3 'nil) 'nil))
  (should (equal (-partition-after-item 3 '(1)) '((1))))
  (should (equal (-partition-after-item 3 '(3)) '((3))))
  (should (equal (-partition-after-item 3 '(3 1)) '((3) (1))))
  (should (equal (-partition-after-item 3 '(3 1 3)) '((3) (1 3))))
  (should (equal (-partition-after-item 3 '(3 2 3 3 4 5 3 2))
		 '((3) (2 3) (3) (4 5 3) (2)))))

(ert-deftest -group-by ()
  "-group-by --group-by"
  (should (equal (-group-by 'cl-evenp 'nil) 'nil))
  (should (equal (-group-by 'cl-evenp '(1 1 2 2 2 3 4 6 8))
		 '((nil 1 1 3) (t 2 2 2 4 6 8))))
  (should (equal (--group-by (car (split-string it "/")) '("a/b" "c/d" "a/e"))
		 '(("a" "a/b" "a/e") ("c" "c/d")))))

(ert-deftest -elem-index ()
  "-elem-index"
  (should (equal (-elem-index 2 '(6 7 8 3 4)) nil))
  (should (equal (-elem-index "bar" '("foo" "bar" "baz")) 1))
  (should (equal (-elem-index '(1 2) '((3) (5 6) (1 2) nil)) 2))
  (should (equal (-elem-index nil nil) nil))
  (should (equal (-elem-index nil '(t)) nil))
  (should (equal (-elem-index nil '(nil)) 0))
  (should (equal (-elem-index nil '(nil t)) 0))
  (should (equal (-elem-index nil '(t nil)) 1))
  (should (equal (-elem-index t nil) nil))
  (should (equal (-elem-index t '(nil)) nil))
  (should (equal (-elem-index t '(t)) 0))
  (should (equal (-elem-index t '(t nil)) 0))
  (should (equal (-elem-index t '(nil t)) 1)))

(ert-deftest -elem-indices ()
  "-elem-indices"
  (should (equal (-elem-indices 2 '(6 7 8 3 4 1)) 'nil))
  (should (equal (-elem-indices "bar" '("foo" "bar" "baz")) '(1)))
  (should (equal (-elem-indices '(1 2) '((3) (1 2) (5 6) (1 2) nil)) '(1 3)))
  (should (equal (-elem-indices nil nil) nil))
  (should (equal (-elem-indices nil '(t)) nil))
  (should (equal (-elem-indices nil '(nil)) '(0)))
  (should (equal (-elem-indices nil '(nil t)) '(0)))
  (should (equal (-elem-indices nil '(t nil)) '(1)))
  (should (equal (-elem-indices nil '(t t)) nil))
  (should (equal (-elem-indices nil '(nil nil)) '(0 1)))
  (should (equal (-elem-indices t nil) nil))
  (should (equal (-elem-indices t '(t)) '(0)))
  (should (equal (-elem-indices t '(nil)) nil))
  (should (equal (-elem-indices t '(nil t)) '(1)))
  (should (equal (-elem-indices t '(t nil)) '(0)))
  (should (equal (-elem-indices t '(t t)) '(0 1)))
  (should (equal (-elem-indices t '(nil nil)) nil)))

(ert-deftest -find-index ()
  "-find-index --find-index"
  (should (equal (-find-index #'numberp '(a b c)) nil))
  (should (equal (-find-index #'natnump '(1 0 -1)) 0))
  (should (equal (--find-index (> it 5) '(2 4 1 6 3 3 5 8)) 3))
  (should (equal (-find-index (-cut string< "baz" <>) '("bar" "foo" "baz")) 1))
  (should (equal (--find-index nil nil) nil))
  (should (equal (--find-index nil '(5)) nil))
  (should (equal (--find-index nil '(5 6 7)) nil))
  (should (equal (--find-index t nil) nil))
  (should (equal (--find-index t '(5)) 0))
  (should (equal (--find-index t '(5 . 6)) 0))
  (should (equal (--find-index t '(5 6 7)) 0))
  (should (equal (let (x) (--find-index (setq x it) nil) x) nil))
  (should (equal (let (x) (--find-index (setq x it) '(5)) x) 5))
  (should (equal (let (x) (--find-index (setq x it) '(5 6 7)) x) 5))
  (should (equal (let (x) (--find-index (ignore (setq x it)) nil) x) nil))
  (should (equal (let (x) (--find-index (ignore (setq x it)) '(5)) x) 5))
  (should (equal (let (x) (--find-index (ignore (setq x it)) '(5 6 7)) x) 7)))

(ert-deftest -find-last-index ()
  "-find-last-index --find-last-index"
  (should (equal (-find-last-index #'numberp '(a b c)) nil))
  (should (equal (--find-last-index (> it 5) '(2 7 1 6 3 8 5 2)) 5))
  (should (equal (-find-last-index (-partial #'string< 'a) '(c b a)) 1))
  (should (equal (--find-last-index nil nil) nil))
  (should (equal (--find-last-index nil '(t)) nil))
  (should (equal (--find-last-index nil '(nil)) nil))
  (should (equal (--find-last-index nil '(nil nil)) nil))
  (should (equal (--find-last-index nil '(nil t)) nil))
  (should (equal (--find-last-index nil '(t nil)) nil))
  (should (equal (--find-last-index nil '(t t)) nil))
  (should (equal (--find-last-index t nil) nil))
  (should (equal (--find-last-index t '(t)) 0))
  (should (equal (--find-last-index t '(nil)) 0))
  (should (equal (--find-last-index t '(nil nil)) 1))
  (should (equal (--find-last-index t '(nil t)) 1))
  (should (equal (--find-last-index t '(t nil)) 1))
  (should (equal (--find-last-index t '(t t)) 1))
  (should (equal (--find-last-index it nil) nil))
  (should (equal (--find-last-index it '(t)) 0))
  (should (equal (--find-last-index it '(nil)) nil))
  (should (equal (--find-last-index it '(nil nil)) nil))
  (should (equal (--find-last-index it '(nil t)) 1))
  (should (equal (--find-last-index it '(t nil)) 0))
  (should (equal (--find-last-index it '(t t)) 1)))

(ert-deftest -find-indices ()
  "-find-indices --find-indices"
  (should (equal (-find-indices #'numberp '(a b c)) 'nil))
  (should (equal (-find-indices #'numberp '(8 1 d 2 b c a 3)) '(0 1 3 7)))
  (should (equal (--find-indices (> it 5) '(2 4 1 6 3 3 5 8)) '(3 7)))
  (should (equal (--find-indices (string< "baz" it) '("bar" "foo" "baz")) '(1)))
  (should (equal (--find-indices nil nil) nil))
  (should (equal (--find-indices nil '(1)) nil))
  (should (equal (--find-indices nil '(nil)) nil))
  (should (equal (--find-indices t nil) nil))
  (should (equal (--find-indices t '(1)) '(0)))
  (should (equal (--find-indices t '(nil)) '(0)))
  (should (equal (--find-indices t '(1 2)) '(0 1)))
  (should (equal (--find-indices t '(nil nil)) '(0 1)))
  (should (equal (--find-indices it nil) nil))
  (should (equal (--find-indices it '(1)) '(0)))
  (should (equal (--find-indices it '(nil)) nil))
  (should (equal (--find-indices it '(1 2)) '(0 1)))
  (should (equal (--find-indices it '(nil nil)) nil))
  (should (equal (-find-indices #'ignore nil) nil))
  (should (equal (-find-indices #'ignore '(1)) nil))
  (should (equal (-find-indices #'ignore '(nil)) nil))
  (should (equal (-find-indices (-andfn) nil) nil))
  (should (equal (-find-indices (-andfn) '(1)) '(0)))
  (should (equal (-find-indices (-andfn) '(nil)) '(0)))
  (should (equal (-find-indices (-andfn) '(1 2)) '(0 1)))
  (should (equal (-find-indices (-andfn) '(nil nil)) '(0 1)))
  (should (equal (-find-indices #'identity nil) nil))
  (should (equal (-find-indices #'identity '(1)) '(0)))
  (should (equal (-find-indices #'identity '(nil)) nil))
  (should (equal (-find-indices #'identity '(1 2)) '(0 1)))
  (should (equal (-find-indices #'identity '(nil nil)) nil)))

(ert-deftest -grade-up ()
  "-grade-up"
  (should (equal (-grade-up #'< '(3 1 4 2 1 3 3)) '(1 4 3 0 5 6 2)))
  (should (equal (let ((l '(3 1 4 2 1 3 3))) (-select-by-indices (-grade-up #'< l) l))
		 '(1 1 2 3 3 3 4))))

(ert-deftest -grade-down ()
  "-grade-down"
  (should (equal (-grade-down #'< '(3 1 4 2 1 3 3)) '(2 0 5 6 3 1 4)))
  (should (equal (let ((l '(3 1 4 2 1 3 3)))
		   (-select-by-indices (-grade-down #'< l) l))
		 '(4 3 3 3 2 1 1))))

(ert-deftest -union ()
  "-union"
  (should (equal (-union '(1 2 3) '(3 4 5)) '(1 2 3 4 5)))
  (should (equal (-union '(1 2 2 4) 'nil) '(1 2 4)))
  (should (equal (-union '(1 1 2 2) '(4 4 3 2 1)) '(1 2 4 3)))
  (should (equal (-union 'nil 'nil) 'nil))
  (should (equal (-union 'nil '(a)) '(a)))
  (should (equal (-union 'nil '(a a)) '(a)))
  (should (equal (-union 'nil '(a a b)) '(a b)))
  (should (equal (-union 'nil '(a b a)) '(a b)))
  (should (equal (-union 'nil '(b a a)) '(b a)))
  (should (equal (-union '(a) 'nil) '(a)))
  (should (equal (-union '(a a) 'nil) '(a)))
  (should (equal (-union '(a a b) 'nil) '(a b)))
  (should (equal (-union '(a b a) 'nil) '(a b)))
  (should (equal (-union '(b a a) 'nil) '(b a)))
  (should (equal (let ((dash--short-list-length 0)) (-union 'nil '(a))) '(a)))
  (should (equal (let ((dash--short-list-length 0)) (-union 'nil '(a a))) '(a)))
  (should (equal (let ((dash--short-list-length 0)) (-union 'nil '(a a b))) '(a b)))
  (should (equal (let ((dash--short-list-length 0)) (-union 'nil '(a b a))) '(a b)))
  (should (equal (let ((dash--short-list-length 0)) (-union 'nil '(b a a))) '(b a)))
  (should (equal (let ((dash--short-list-length 0)) (-union '(a) 'nil)) '(a)))
  (should (equal (let ((dash--short-list-length 0)) (-union '(a a) 'nil)) '(a)))
  (should (equal (let ((dash--short-list-length 0)) (-union '(a a b) 'nil)) '(a b)))
  (should (equal (let ((dash--short-list-length 0)) (-union '(a b a) 'nil)) '(a b)))
  (should (equal (let ((dash--short-list-length 0)) (-union '(b a a) 'nil)) '(b a)))
  (should (equal (let ((dash--short-list-length 0)) (-union '(a a b c c) '(e e d c b)))
		 '(a b c e d)))
  (should (equal (let ((-compare-fn #'string=)) (-union '(a "b") '("a" b))) '(a "b")))
  (should (equal (let ((-compare-fn #'string=)) (-union '("a" b) '(a "b"))) '("a" b))))

(ert-deftest -difference ()
  "-difference"
  (should (equal (-difference 'nil 'nil) 'nil))
  (should (equal (-difference '(1 2 3) '(4 5 6)) '(1 2 3)))
  (should (equal (-difference '(1 2 3 4) '(3 4 5 6)) '(1 2)))
  (should (equal (-difference 'nil '(a)) 'nil))
  (should (equal (-difference '(a) 'nil) '(a)))
  (should (equal (-difference '(a) '(a)) 'nil))
  (should (equal (-difference '(a a) 'nil) '(a)))
  (should (equal (-difference '(a a) '(a)) 'nil))
  (should (equal (-difference '(a a) '(a a)) 'nil))
  (should (equal (-difference '(a a) '(b)) '(a)))
  (should (equal (-difference '(a b c c d a) '(c c b)) '(a d)))
  (should (equal (let ((dash--short-list-length 0)) (-difference '(a) '(a))) 'nil))
  (should (equal (let ((dash--short-list-length 0)) (-difference '(a a) '(a))) 'nil))
  (should (equal (let ((dash--short-list-length 0)) (-difference '(a a) '(a a))) 'nil))
  (should (equal (let ((dash--short-list-length 0)) (-difference '(a a) '(b))) '(a)))
  (should (equal (let ((dash--short-list-length 0))
		   (-difference '(a b c c d a) '(c c b)))
		 '(a d)))
  (should (equal (let ((-compare-fn #'string=)) (-difference '(a) '("a"))) 'nil))
  (should (equal (let ((-compare-fn #'string=)) (-difference '("a") '(a))) 'nil))
  (should (equal (let ((-compare-fn #'string=)) (-difference '(a "a") '(a))) 'nil))
  (should (equal (let ((-compare-fn #'string=)) (-difference '(a "a") '(b))) '(a)))
  (should (equal (let ((-compare-fn #'string=)) (-difference '("a") '(a a))) 'nil)))

(ert-deftest -intersection ()
  "-intersection"
  (should (equal (-intersection 'nil 'nil) 'nil))
  (should (equal (-intersection '(1 2 3) '(4 5 6)) 'nil))
  (should (equal (-intersection '(1 2 2 3) '(4 3 3 2)) '(2 3)))
  (should (equal (-intersection 'nil '(a)) 'nil))
  (should (equal (-intersection '(a) 'nil) 'nil))
  (should (equal (-intersection '(a) '(a)) '(a)))
  (should (equal (-intersection '(a a b) '(b a)) '(a b)))
  (should (equal (-intersection '(a b) '(b a a)) '(a b)))
  (should (equal (let ((dash--short-list-length 0)) (-intersection '(a) '(b))) 'nil))
  (should (equal (let ((dash--short-list-length 0)) (-intersection '(a) '(a))) '(a)))
  (should (equal (let ((dash--short-list-length 0)) (-intersection '(a a b) '(b b a)))
		 '(a b)))
  (should (equal (let ((dash--short-list-length 0)) (-intersection '(a a b) '(b a)))
		 '(a b)))
  (should (equal (let ((dash--short-list-length 0)) (-intersection '(a b) '(b a a)))
		 '(a b))))

(ert-deftest -powerset ()
  "-powerset"
  (should (equal (-powerset 'nil) '(nil)))
  (should (equal (-powerset '(x y)) '((x y) (x) (y) nil)))
  (should (equal (-powerset '(x y z)) '((x y z) (x y) (x z) (x) (y z) (y) (z) nil)))
  (should (equal (let* ((l (list 1)) (p (-powerset l))) (setcar l 2) p) '((1) nil))))

(ert-deftest -permutations ()
  "-permutations"
  (should (equal (-permutations 'nil) '(nil)))
  (should (equal (-permutations '(a a b)) '((a a b) (a b a) (b a a))))
  (should (equal (-permutations '(a b c))
		 '((a b c) (a c b) (b a c) (b c a) (c a b) (c b a))))
  (should (equal (-permutations '(1)) '((1))))
  (should (equal (-permutations '(a)) '((a))))
  (should (equal (-permutations '(nil)) '((nil))))
  (should (equal (-permutations '(1 1)) '((1 1))))
  (should (equal (-permutations '(1 2)) '((1 2) (2 1))))
  (should (equal (-permutations '(2 1)) '((2 1) (1 2))))
  (should (equal (-permutations '(1 a)) '((1 a) (a 1))))
  (should (equal (-permutations '(a 1)) '((a 1) (1 a))))
  (should (equal (-permutations '(a a)) '((a a))))
  (should (equal (-permutations '(a b)) '((a b) (b a))))
  (should (equal (-permutations '(b a)) '((b a) (a b))))
  (should (equal (-permutations '(1 1 1)) '((1 1 1))))
  (should (equal (-permutations '(1 1 2)) '((1 1 2) (1 2 1) (2 1 1))))
  (should (equal (-permutations '(1 2 1)) '((1 1 2) (1 2 1) (2 1 1))))
  (should (equal (-permutations '(2 1 1)) '((2 1 1) (1 2 1) (1 1 2))))
  (should (equal (-permutations '(1 1 a)) '((1 1 a) (1 a 1) (a 1 1))))
  (should (equal (-permutations '(1 a 1)) '((1 1 a) (1 a 1) (a 1 1))))
  (should (equal (-permutations '(a 1 1)) '((a 1 1) (1 a 1) (1 1 a))))
  (should (equal (-permutations '(a a 1)) '((a a 1) (a 1 a) (1 a a))))
  (should (equal (-permutations '(a 1 a)) '((a a 1) (a 1 a) (1 a a))))
  (should (equal (-permutations '(1 a a)) '((1 a a) (a 1 a) (a a 1))))
  (should (equal (-permutations '(1 2 3))
		 '((1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (3 2 1))))
  (should (equal (-permutations '(3 2 1))
		 '((3 2 1) (3 1 2) (2 3 1) (2 1 3) (1 3 2) (1 2 3))))
  (should (equal (-permutations '(1 2 a))
		 '((1 2 a) (1 a 2) (2 1 a) (2 a 1) (a 1 2) (a 2 1))))
  (should (equal (-permutations '(1 a 2))
		 '((1 a 2) (1 2 a) (a 1 2) (a 2 1) (2 1 a) (2 a 1))))
  (should (equal (-permutations '(a 1 2))
		 '((a 1 2) (a 2 1) (1 a 2) (1 2 a) (2 a 1) (2 1 a))))
  (should (equal (-permutations '(a b 1))
		 '((a b 1) (a 1 b) (b a 1) (b 1 a) (1 a b) (1 b a))))
  (should (equal (-permutations '(a 1 b))
		 '((a 1 b) (a b 1) (1 a b) (1 b a) (b a 1) (b 1 a))))
  (should (equal (-permutations '(1 a b))
		 '((1 a b) (1 b a) (a 1 b) (a b 1) (b 1 a) (b a 1))))
  (should (equal (-permutations '(a a a)) '((a a a))))
  (should (equal (-permutations '(a b a)) '((a a b) (a b a) (b a a))))
  (should (equal (-permutations '(b a a)) '((b a a) (a b a) (a a b))))
  (should (equal (-permutations '(c b a))
		 '((c b a) (c a b) (b c a) (b a c) (a c b) (a b c))))
  (should (equal (let ((-compare-fn #'string=)) (-permutations '(a "a"))) '((a a))))
  (should (equal (let ((-compare-fn #'string=)) (-permutations '("a" a))) '(("a" "a"))))
  (should (equal (let ((-compare-fn #'string=))
		   (-permutations '(a "a" b)))
		 '((a a b) (a b a) (b a a))))
  (should (equal (let ((-compare-fn #'string=))
		   (-permutations '(a b "a")))
		 '((a a b) (a b a) (b a a))))
  (should (equal (let ((-compare-fn #'string=))
		   (-permutations '(b a "a")))
		 '((b a a) (a b a) (a a b))))
  (should (equal (let ((-compare-fn #'string=))
		   (-permutations '("a" a b)))
		 '(("a" "a" b) ("a" b "a") (b "a" "a"))))
  (should (equal (let ((-compare-fn #'string=))
		   (-permutations '("a" b a)))
		 '(("a" "a" b) ("a" b "a") (b "a" "a"))))
  (should (equal (let ((-compare-fn #'string=))
		   (-permutations '(b "a" a)))
		 '((b "a" "a") ("a" b "a") ("a" "a" b)))))

(ert-deftest -distinct ()
  "-distinct"
  (should (equal (-distinct 'nil) 'nil))
  (should (equal (-distinct '(1 1 2 3 3)) '(1 2 3)))
  (should (equal (-distinct '(t t t)) '(t)))
  (should (equal (-distinct '(nil nil nil)) '(nil)))
  (should (equal (-uniq '((1) (2) (1) (1))) '((1) (2))))
  (should (equal (let ((-compare-fn #'eq)) (-uniq '((1) (2) (1) (1))))
		 '((1) (2) (1) (1))))
  (should (equal (let ((-compare-fn #'eq)) (-uniq '(:a :b :a :a))) '(:a :b)))
  (should (equal (let ((-compare-fn #'eql)) (-uniq '(2.1 3.1 2.1 2.1))) '(2.1 3.1)))
  (should (equal (let ((-compare-fn #'string=))
		   (-uniq '(dash "dash" "ash" "cash" "bash")))
		 '(dash "ash" "cash" "bash")))
  (should (equal (let ((-compare-fn #'string=)) (-uniq '(a))) '(a)))
  (should (equal (let ((-compare-fn #'string=)) (-uniq '(a a))) '(a)))
  (should (equal (let ((-compare-fn #'string=)) (-uniq '(a b))) '(a b)))
  (should (equal (let ((-compare-fn #'string=)) (-uniq '(b a))) '(b a)))
  (should (equal (let ((-compare-fn #'string=)) (-uniq '(a "a"))) '(a)))
  (should (equal (let ((-compare-fn #'string=)) (-uniq '("a" a))) '("a")))
  (should (equal (let ((dash--short-list-length 0)) (-uniq '(a))) '(a)))
  (should (equal (let ((dash--short-list-length 0)) (-uniq '(a b))) '(a b)))
  (should (equal (let ((dash--short-list-length 0)) (-uniq '(b a))) '(b a)))
  (should (equal (let ((dash--short-list-length 0)) (-uniq '(a a))) '(a)))
  (should (equal (let ((dash--short-list-length 0)) (-uniq '(a a b))) '(a b)))
  (should (equal (let ((dash--short-list-length 0)) (-uniq '(a b a))) '(a b)))
  (should (equal (let ((dash--short-list-length 0)) (-uniq '(b a a))) '(b a)))
  (should (equal (let ((dash--short-list-length 0) (-compare-fn #'eq))
		   (-uniq (list (string 97) (string 97))))
		 '("a" "a")))
  (should (equal (let ((dash--short-list-length 0)
		       (-compare-fn #'eq)
		       (a (string 97)))
		   (-uniq (list a a)))
		 '("a"))))

(ert-deftest -same-items? ()
  "-same-items?"
  (should (equal (-same-items? '(1 2 3) '(1 2 3)) t))
  (should (equal (-same-items? '(1 1 2 3) '(3 3 2 1)) t))
  (should (equal (-same-items? '(1 2 3) '(1 2 3 4)) nil))
  (should (equal (-same-items? '((a . 1) (b . 2)) '((a . 1) (b . 2))) t))
  (should (equal (-same-items? 'nil 'nil) t))
  (should (equal (-same-items? 'nil '(a)) nil))
  (should (equal (-same-items? '(a) 'nil) nil))
  (should (equal (-same-items? '(a) '(a)) t))
  (should (equal (-same-items? '(a) '(b)) nil))
  (should (equal (-same-items? '(a) '(a a)) t))
  (should (equal (-same-items? '(b) '(a a)) nil))
  (should (equal (-same-items? '(a) '(a b)) nil))
  (should (equal (-same-items? '(a a) '(a)) t))
  (should (equal (-same-items? '(a a) '(b)) nil))
  (should (equal (-same-items? '(a a) '(a b)) nil))
  (should (equal (-same-items? '(a b) '(a)) nil))
  (should (equal (-same-items? '(a b) '(a a)) nil))
  (should (equal (-same-items? '(a a) '(a a)) t))
  (should (equal (-same-items? '(a a b) '(b b a a)) t))
  (should (equal (-same-items? '(b b a a) '(a a b)) t))
  (should (equal (let ((dash--short-list-length 0)) (-same-items? '(a) '(a))) t))
  (should (equal (let ((dash--short-list-length 0)) (-same-items? '(a) '(b))) nil))
  (should (equal (let ((dash--short-list-length 0)) (-same-items? '(a) '(a a))) t))
  (should (equal (let ((dash--short-list-length 0)) (-same-items? '(b) '(a a))) nil))
  (should (equal (let ((dash--short-list-length 0)) (-same-items? '(a) '(a b))) nil))
  (should (equal (let ((dash--short-list-length 0)) (-same-items? '(a a) '(a))) t))
  (should (equal (let ((dash--short-list-length 0)) (-same-items? '(a a) '(b))) nil))
  (should (equal (let ((dash--short-list-length 0)) (-same-items? '(a a) '(a b))) nil))
  (should (equal (let ((dash--short-list-length 0)) (-same-items? '(a b) '(a))) nil))
  (should (equal (let ((dash--short-list-length 0)) (-same-items? '(a b) '(a a))) nil))
  (should (equal (let ((dash--short-list-length 0)) (-same-items? '(a a) '(a a))) t))
  (should (equal (let ((dash--short-list-length 0))
		   (-same-items? '(a a b) '(b b a a)))
		 t))
  (should (equal (let ((dash--short-list-length 0))
		   (-same-items? '(b b a a) '(a a b)))
		 t)))

(ert-deftest -rotate ()
  "-rotate"
  (should (equal (-rotate 3 '(1 2 3 4 5 6 7)) '(5 6 7 1 2 3 4)))
  (should (equal (-rotate -3 '(1 2 3 4 5 6 7)) '(4 5 6 7 1 2 3)))
  (should (equal (-rotate 16 '(1 2 3 4 5 6 7)) '(6 7 1 2 3 4 5)))
  (should (equal (-rotate -16 '(1 2 3 4 5 6 7)) '(3 4 5 6 7 1 2)))
  (should (equal (let* ((l (list 1 2)) (r (-rotate -1 l))) (setcdr l 0) r) '(2 1)))
  (should (equal (let* ((l (list 1 2)) (r (-rotate 0 l))) (setcdr l 0) r) '(1 2)))
  (should (equal (let* ((l (list 1 2)) (r (-rotate 1 l))) (setcdr l 0) r) '(2 1)))
  (should (equal (-rotate -1 'nil) 'nil))
  (should (equal (-rotate 0 'nil) 'nil))
  (should (equal (-rotate 1 'nil) 'nil))
  (should (equal (-rotate -2 '(1)) '(1)))
  (should (equal (-rotate -1 '(1)) '(1)))
  (should (equal (-rotate 0 '(1)) '(1)))
  (should (equal (-rotate 1 '(1)) '(1)))
  (should (equal (-rotate 2 '(1)) '(1)))
  (should (equal (-rotate -4 '(1 2)) '(1 2)))
  (should (equal (-rotate -3 '(1 2)) '(2 1)))
  (should (equal (-rotate -2 '(1 2)) '(1 2)))
  (should (equal (-rotate -1 '(1 2)) '(2 1)))
  (should (equal (-rotate 0 '(1 2)) '(1 2)))
  (should (equal (-rotate 1 '(1 2)) '(2 1)))
  (should (equal (-rotate 2 '(1 2)) '(1 2)))
  (should (equal (-rotate 3 '(1 2)) '(2 1)))
  (should (equal (-rotate 4 '(1 2)) '(1 2)))
  (should (equal (-rotate -6 '(1 2 3)) '(1 2 3)))
  (should (equal (-rotate -5 '(1 2 3)) '(3 1 2)))
  (should (equal (-rotate -4 '(1 2 3)) '(2 3 1)))
  (should (equal (-rotate -3 '(1 2 3)) '(1 2 3)))
  (should (equal (-rotate -2 '(1 2 3)) '(3 1 2)))
  (should (equal (-rotate -1 '(1 2 3)) '(2 3 1)))
  (should (equal (-rotate 0 '(1 2 3)) '(1 2 3)))
  (should (equal (-rotate 1 '(1 2 3)) '(3 1 2)))
  (should (equal (-rotate 2 '(1 2 3)) '(2 3 1)))
  (should (equal (-rotate 3 '(1 2 3)) '(1 2 3)))
  (should (equal (-rotate 4 '(1 2 3)) '(3 1 2)))
  (should (equal (-rotate 5 '(1 2 3)) '(2 3 1)))
  (should (equal (-rotate 6 '(1 2 3)) '(1 2 3))))

(ert-deftest -cons* ()
  "-cons*"
  (should (equal (-cons* 1 2) '(1 . 2)))
  (should (equal (-cons* 1 2 3) '(1 2 . 3)))
  (should (equal (-cons* 1) 1))
  (should (equal (-cons* 1 2 3 4) '(1 2 3 . 4)))
  (should (equal (apply #'-cons* (number-sequence 1 10)) '(1 2 3 4 5 6 7 8 9 . 10)))
  (should (equal (-cons*) nil))
  (should (equal (-cons* nil) nil))
  (should (equal (-cons* 1 nil) '(1)))
  (should (equal (-cons* 1 '(2)) '(1 2)))
  ;; Assert that &rest conses a fresh list in case that ever changes.
  (should (equal (let ((l (list 1 2))) (apply #'-cons* l) l) '(1 2))))

(ert-deftest -snoc ()
  "-snoc"
  (should (equal (-snoc '(1 2 3) 4) '(1 2 3 4)))
  (should (equal (-snoc '(1 2 3) 4 5 6) '(1 2 3 4 5 6)))
  (should (equal (-snoc '(1 2 3) '(4 5 6)) '(1 2 3 (4 5 6)))))

(ert-deftest -interpose ()
  "-interpose"
  (should (equal (-interpose "-" 'nil) 'nil))
  (should (equal (-interpose "-" '("a")) '("a")))
  (should (equal (-interpose "-" '("a" "b" "c")) '("a" "-" "b" "-" "c"))))

(ert-deftest -interleave ()
  "-interleave"
  (should (equal (-interleave '(1 2) '("a" "b")) '(1 "a" 2 "b")))
  (should (equal (-interleave '(1 2) '("a" "b") '("A" "B")) '(1 "a" "A" 2 "b" "B")))
  (should (equal (-interleave '(1 2 3) '("a" "b")) '(1 "a" 2 "b")))
  (should (equal (-interleave '(1 2 3) '("a" "b" "c" "d")) '(1 "a" 2 "b" 3 "c")))
  (should (equal (-interleave) nil)))

(ert-deftest -iota ()
  "-iota"
  (should (equal (-iota 6) '(0 1 2 3 4 5)))
  (should (equal (-iota 4 2.5 -2) '(2.5 0.5 -1.5 -3.5)))
  (should (equal (should-error (-iota -1)) '(wrong-type-argument natnump -1)))
  (should (equal (-iota 0) nil))
  (should (equal (-iota 0 nil 0) nil))
  (should (equal (-iota 1 nil 0) '(0)))
  (should (equal (-iota 1) '(0)))
  (should (equal (-iota 1 nil -1) '(0))))

(ert-deftest -zip-with ()
  "-zip-with --zip-with"
  (should (equal (-zip-with #'+ '(1 2 3 4) '(5 6 7)) '(6 8 10)))
  (should (equal (-zip-with #'cons '(1 2 3) '(4 5 6 7)) '((1 . 4) (2 . 5) (3 . 6))))
  (should (equal (--zip-with (format "%s & %s" it other) '(Batman Jekyll) '(Robin Hyde))
		 '("Batman & Robin" "Jekyll & Hyde")))
  (should (equal (-zip-with #'cons '(nil) '(nil)) '((nil))))
  (should (equal (-zip-with #'cons '(nil) '(nil nil)) '((nil))))
  (should (equal (-zip-with #'cons '(nil nil) '(nil)) '((nil))))
  (should (equal (-zip-with #'cons '(nil nil) '(nil nil)) '((nil) (nil))))
  (should (equal (--zip-with (cons it other) nil nil) nil))
  (should (equal (--zip-with (cons it other) nil '(nil)) nil))
  (should (equal (--zip-with (cons it other) '(nil) 'nil) nil))
  (should (equal (--zip-with (cons it other) '(nil) '(nil)) '((nil))))
  (should (equal (--zip-with (cons it other) '(nil) '(nil nil)) '((nil))))
  (should (equal (--zip-with (cons it other) '(nil nil) '(nil)) '((nil))))
  (should (equal (--zip-with (cons it other) '(nil nil) '(nil nil)) '((nil) (nil))))
  (should (equal (-zip-with #'signal nil nil) nil))
  (should (equal (-zip-with #'signal '(arith-error) nil) nil))
  (should (equal (-zip-with #'signal nil '(nil)) nil))
  (should (equal (should-error (-zip-with #'signal '(arith-error) '(nil)))
		 '(arith-error))))

(ert-deftest -zip-pair ()
  "-zip-pair"
  (should (equal (-zip-pair '(1 2 3 4) '(5 6 7)) '((1 . 5) (2 . 6) (3 . 7))))
  (should (equal (-zip-pair '(1 2 3) '(4 5 6)) '((1 . 4) (2 . 5) (3 . 6))))
  (should (equal (-zip-pair '(1 2) '(3)) '((1 . 3))))
  (should (equal (-zip-pair nil nil) nil))
  (should (equal (-zip-pair '(0) nil) nil))
  (should (equal (-zip-pair nil '(0)) nil))
  (should (equal (-zip-pair '(1 2 3 4) '(4 5 6)) '((1 . 4) (2 . 5) (3 . 6))))
  (should (equal (-zip-pair '(1 2 3) '(4 5 6 7)) '((1 . 4) (2 . 5) (3 . 6))))
  (should (equal (with-no-warnings (-zip-pair '(1 2 3 4) '(5 6 7) '(8 9)))
		 '((1 5 8) (2 6 9))))
  (should (equal (with-no-warnings (-zip-pair '(1 2 3) '(4 5 6) '(7 8 9)))
		 '((1 4 7) (2 5 8) (3 6 9))))
  (should (equal (with-no-warnings (-zip-pair '(1 2 3))) '((1) (2) (3))))
  (should (equal (with-no-warnings (-zip-pair)) nil))
  (should (equal (with-no-warnings (-zip-pair nil)) nil))
  (should (equal (with-no-warnings (-zip-pair '(0))) '((0))))
  (should (equal (with-no-warnings (-zip-pair '(0 1))) '((0) (1))))
  (should (equal (with-no-warnings (-zip-pair nil nil nil)) nil))
  (should (equal (with-no-warnings (-zip-pair '(0) nil nil)) nil))
  (should (equal (with-no-warnings (-zip-pair nil '(0) nil)) nil))
  (should (equal (with-no-warnings (-zip-pair nil nil '(0))) nil))
  (should (equal (with-no-warnings (-zip-pair '(0) '(1) nil)) nil))
  (should (equal (with-no-warnings (-zip-pair '(0) nil '(1))) nil))
  (should (equal (with-no-warnings (-zip-pair nil '(0) '(1))) nil))
  (should (equal (with-no-warnings (-zip-pair '(0) '(1) '(2))) '((0 1 2))))
  (should (equal (with-no-warnings (-zip-pair '(0 1) '(2) '(3))) '((0 2 3))))
  (should (equal (with-no-warnings (-zip-pair '(0) '(1 2) '(3))) '((0 1 3))))
  (should (equal (with-no-warnings (-zip-pair '(0) '(1) '(2 3))) '((0 1 2))))
  (should (equal (with-no-warnings (-zip-pair '(0 1) '(2 3) '(4))) '((0 2 4))))
  (should (equal (with-no-warnings (-zip-pair '(0 1) '(2) '(3 4))) '((0 2 3))))
  (should (equal (with-no-warnings (-zip-pair '(0) '(1 2) '(3 4))) '((0 1 3))))
  (should (equal (with-no-warnings (-zip-pair '(0 1) '(2 3) '(4 5)))
		 '((0 2 4) (1 3 5))))
  (should (equal (with-no-warnings (-zip-pair '(0 1) '(2 3 4) '(5))) '((0 2 5)))))

(ert-deftest -zip-lists ()
  "-zip-lists"
  (should (equal (-zip-lists '(1 2 3) '(4 5 6)) '((1 4) (2 5) (3 6))))
  (should (equal (-zip-lists '(1 2 3) '(4 5 6 7)) '((1 4) (2 5) (3 6))))
  (should (equal (-zip-lists '(1 2) '(3 4 5) '(6)) '((1 3 6))))
  (should (equal (-zip-lists '(1 2 3 4) '(4 5 6)) '((1 4) (2 5) (3 6))))
  (should (equal (-zip-lists '(1 2 3) '(4 5 6) '(7 8 9)) '((1 4 7) (2 5 8) (3 6 9))))
  (should (equal (-zip-lists) nil))
  (should (equal (-zip-lists nil) nil))
  (should (equal (-zip-lists '(0)) '((0))))
  (should (equal (-zip-lists '(0 1)) '((0) (1))))
  (should (equal (-zip-lists '(0 1 2)) '((0) (1) (2))))
  (should (equal (-zip-lists nil nil) nil))
  (should (equal (-zip-lists '(0) nil) nil))
  (should (equal (-zip-lists nil '(0)) nil))
  (should (equal (-zip-lists nil nil nil) nil))
  (should (equal (-zip-lists '(0) nil nil) nil))
  (should (equal (-zip-lists nil '(0) nil) nil))
  (should (equal (-zip-lists nil nil '(0)) nil))
  (should (equal (-zip-lists '(0) '(1) nil) nil))
  (should (equal (-zip-lists '(0) nil '(1)) nil))
  (should (equal (-zip-lists nil '(0) '(1)) nil))
  (should (equal (-zip-lists '(0) '(1) '(2)) '((0 1 2))))
  (should (equal (-zip-lists '(0 1) '(2) '(3)) '((0 2 3))))
  (should (equal (-zip-lists '(0) '(1 2) '(3)) '((0 1 3))))
  (should (equal (-zip-lists '(0) '(1) '(2 3)) '((0 1 2))))
  (should (equal (-zip-lists '(0 1) '(2 3) '(4)) '((0 2 4))))
  (should (equal (-zip-lists '(0 1) '(2) '(3 4)) '((0 2 3))))
  (should (equal (-zip-lists '(0) '(1 2) '(3 4)) '((0 1 3))))
  (should (equal (-zip-lists '(0 1) '(2 3) '(4 5)) '((0 2 4) (1 3 5)))))

(ert-deftest -zip-lists-fill ()
  "-zip-lists-fill"
  (should (equal (-zip-lists-fill 0 '(1 2) '(3 4 5) '(6)) '((1 3 6) (2 4 0) (0 5 0))))
  (should (equal (-zip-lists-fill 0 '(1 2) '(3 4) '(5 6)) '((1 3 5) (2 4 6))))
  (should (equal (-zip-lists-fill 0 '(1 2 3) nil) '((1 0) (2 0) (3 0))))
  (should (equal (-zip-lists-fill 0) nil))
  (should (equal (-zip-lists-fill 0 nil) nil))
  (should (equal (-zip-lists-fill 0 '(1)) '((1))))
  (should (equal (-zip-lists-fill 0 '(1 2)) '((1) (2))))
  (should (equal (-zip-lists-fill 0 '(1 2 3)) '((1) (2) (3))))
  (should (equal (-zip-lists-fill 0 nil nil) nil))
  (should (equal (-zip-lists-fill 0 '(1) nil) '((1 0))))
  (should (equal (-zip-lists-fill 0 nil '(1)) '((0 1))))
  (should (equal (-zip-lists-fill 0 '(1) '(2)) '((1 2))))
  (should (equal (-zip-lists-fill 0 '(1 2) nil) '((1 0) (2 0))))
  (should (equal (-zip-lists-fill 0 nil '(1 2)) '((0 1) (0 2))))
  (should (equal (-zip-lists-fill 0 nil '(1 2 3)) '((0 1) (0 2) (0 3))))
  (should (equal (-zip-lists-fill 0 '(1 2) '(3)) '((1 3) (2 0))))
  (should (equal (-zip-lists-fill 0 '(1) '(2 3)) '((1 2) (0 3))))
  (should (equal (-zip-lists-fill 0 nil nil nil) nil))
  (should (equal (-zip-lists-fill 0 '(1) nil nil) '((1 0 0))))
  (should (equal (-zip-lists-fill 0 nil '(1) nil) '((0 1 0))))
  (should (equal (-zip-lists-fill 0 nil nil '(1)) '((0 0 1))))
  (should (equal (-zip-lists-fill 0 '(1 2) nil nil) '((1 0 0) (2 0 0))))
  (should (equal (-zip-lists-fill 0 nil '(1 2) nil) '((0 1 0) (0 2 0))))
  (should (equal (-zip-lists-fill 0 nil nil '(1 2)) '((0 0 1) (0 0 2)))))

(ert-deftest -zip ()
  "-zip"
  (should (equal (-zip '(1 2 3 4) '(5 6 7) '(8 9)) '((1 5 8) (2 6 9))))
  (should (equal (-zip '(1 2 3) '(4 5 6) '(7 8 9)) '((1 4 7) (2 5 8) (3 6 9))))
  (should (equal (-zip '(1 2 3)) '((1) (2) (3))))
  (should (equal (-zip) nil))
  (should (equal (-zip nil) nil))
  (should (equal (-zip '(0)) '((0))))
  (should (equal (-zip '(0 1)) '((0) (1))))
  (should (equal (with-no-warnings (-zip nil nil)) nil))
  (should (equal (with-no-warnings (-zip '(0) nil)) nil))
  (should (equal (with-no-warnings (-zip nil '(0))) nil))
  (should (equal (with-no-warnings (-zip '(1 2 3 4) '(4 5 6)))
		 '((1 . 4) (2 . 5) (3 . 6))))
  (should (equal (with-no-warnings (-zip '(1 2 3) '(4 5 6 7)))
		 '((1 . 4) (2 . 5) (3 . 6))))
  (should (equal (-zip nil nil nil) nil))
  (should (equal (-zip '(0) nil nil) nil))
  (should (equal (-zip nil '(0) nil) nil))
  (should (equal (-zip nil nil '(0)) nil))
  (should (equal (-zip '(0) '(1) nil) nil))
  (should (equal (-zip '(0) nil '(1)) nil))
  (should (equal (-zip nil '(0) '(1)) nil))
  (should (equal (-zip '(0) '(1) '(2)) '((0 1 2))))
  (should (equal (-zip '(0 1) '(2) '(3)) '((0 2 3))))
  (should (equal (-zip '(0) '(1 2) '(3)) '((0 1 3))))
  (should (equal (-zip '(0) '(1) '(2 3)) '((0 1 2))))
  (should (equal (-zip '(0 1) '(2 3) '(4)) '((0 2 4))))
  (should (equal (-zip '(0 1) '(2) '(3 4)) '((0 2 3))))
  (should (equal (-zip '(0) '(1 2) '(3 4)) '((0 1 3))))
  (should (equal (-zip '(0 1) '(2 3) '(4 5)) '((0 2 4) (1 3 5))))
  (should (equal (-zip '(0 1) '(2 3 4) '(5)) '((0 2 5)))))

(ert-deftest -zip-fill ()
  "-zip-fill"
  (should (equal (-zip-fill 0 '(1 2 3) '(4 5)) '((1 . 4) (2 . 5) (3 . 0))))
  (should (equal (-zip-fill 0 'nil '(1 2 3)) '((0 . 1) (0 . 2) (0 . 3))))
  (should (equal (-zip-fill 0 '(1 2) '(3 4) '(5 6)) '((1 3 5) (2 4 6))))
  (should (equal (-zip-fill 0 '(1 2) '(3 4 5) '(6)) '((1 3 6) (2 4 0) (0 5 0))))
  (should (equal (-zip-fill 0) nil))
  (should (equal (-zip-fill 0 nil) nil))
  (should (equal (-zip-fill 0 '(1)) '((1))))
  (should (equal (-zip-fill 0 '(1 2)) '((1) (2))))
  (should (equal (-zip-fill 0 '(1 2 3)) '((1) (2) (3))))
  (should (equal (-zip-fill 0 nil nil) nil))
  (should (equal (-zip-fill 0 '(1) nil) '((1 . 0))))
  (should (equal (-zip-fill 0 nil '(1)) '((0 . 1))))
  (should (equal (-zip-fill 0 '(1) '(2)) '((1 . 2))))
  (should (equal (-zip-fill 0 '(1 2) nil) '((1 . 0) (2 . 0))))
  (should (equal (-zip-fill 0 nil '(1 2)) '((0 . 1) (0 . 2))))
  (should (equal (-zip-fill 0 '(1 2 3) nil) '((1 . 0) (2 . 0) (3 . 0))))
  (should (equal (-zip-fill 0 nil '(1 2 3)) '((0 . 1) (0 . 2) (0 . 3))))
  (should (equal (-zip-fill 0 '(1 2) '(3)) '((1 . 3) (2 . 0))))
  (should (equal (-zip-fill 0 '(1) '(2 3)) '((1 . 2) (0 . 3))))
  (should (equal (-zip-fill 0 nil nil nil) nil))
  (should (equal (-zip-fill 0 '(1) nil nil) '((1 0 0))))
  (should (equal (-zip-fill 0 nil '(1) nil) '((0 1 0))))
  (should (equal (-zip-fill 0 nil nil '(1)) '((0 0 1))))
  (should (equal (-zip-fill 0 '(1 2) nil nil) '((1 0 0) (2 0 0))))
  (should (equal (-zip-fill 0 nil '(1 2) nil) '((0 1 0) (0 2 0))))
  (should (equal (-zip-fill 0 nil nil '(1 2)) '((0 0 1) (0 0 2)))))

(ert-deftest -unzip-lists ()
  "-unzip-lists"
  (should (equal (-unzip-lists (-zip-lists '(1 2) '(3 4) '(5 6))) '((1 2) (3 4) (5 6))))
  (should (equal (-unzip-lists '((1 2 3) (4 5) (6 7) (8 9))) '((1 4 6 8) (2 5 7 9))))
  (should (equal (-unzip-lists '((1 2 3) (4 5 6))) '((1 4) (2 5) (3 6))))
  (should (equal (-unzip-lists nil) nil))
  (should (equal (-unzip-lists '(nil)) nil))
  (should (equal (-unzip-lists '((1))) '((1))))
  (should (equal (-unzip-lists '((1 2))) '((1) (2))))
  (should (equal (-unzip-lists '((1 2 3))) '((1) (2) (3))))
  (should (equal (-unzip-lists '(nil nil)) nil))
  (should (equal (-unzip-lists '((1) nil)) nil))
  (should (equal (-unzip-lists '(nil (1))) nil))
  (should (equal (-unzip-lists '((1) (2))) '((1 2))))
  (should (equal (-unzip-lists '((1 2) (3))) '((1 3))))
  (should (equal (-unzip-lists '((1) (2 3))) '((1 2))))
  (should (equal (-unzip-lists '((1 2) (3 4))) '((1 3) (2 4))))
  (should (equal (-unzip-lists '(nil nil nil)) nil))
  (should (equal (-unzip-lists '((1) nil nil)) nil))
  (should (equal (-unzip-lists '(nil (1) nil)) nil))
  (should (equal (-unzip-lists '(nil nil (1))) nil))
  (should (equal (-unzip-lists '((1) (2) nil)) nil))
  (should (equal (-unzip-lists '((1) nil (2))) nil))
  (should (equal (-unzip-lists '(nil (1) (2))) nil))
  (should (equal (-unzip-lists '((1) (2) (3))) '((1 2 3))))
  (should (equal (-unzip-lists '((1 2) (3) (4))) '((1 3 4))))
  (should (equal (-unzip-lists '((1) (2 3) (4))) '((1 2 4))))
  (should (equal (-unzip-lists '((1) (2) (3 4))) '((1 2 3))))
  (should (equal (-unzip-lists '((1 2) (3 4) (5 6))) '((1 3 5) (2 4 6))))
  (should (equal (-unzip-lists '((1 2 3) (4 5 6) (7 8 9))) '((1 4 7) (2 5 8) (3 6 9)))))

(ert-deftest -unzip ()
  "-unzip"
  (should (equal (-unzip (-zip '(1 2) '(3 4) '(5 6))) '((1 . 2) (3 . 4) (5 . 6))))
  (should (equal (-unzip '((1 2 3) (4 5 6))) '((1 . 4) (2 . 5) (3 . 6))))
  (should (equal (-unzip '((1 2 3) (4 5) (6 7) (8 9))) '((1 4 6 8) (2 5 7 9))))
  (should (equal (-unzip nil) nil))
  (should (equal (-unzip '(nil)) nil))
  (should (equal (-unzip '((1))) '((1))))
  (should (equal (-unzip '((1 2))) '((1) (2))))
  (should (equal (-unzip '((1 2 3))) '((1) (2) (3))))
  (should (equal (-unzip '(nil nil)) nil))
  (should (equal (-unzip '((1) nil)) nil))
  (should (equal (-unzip '(nil (1))) nil))
  (should (equal (-unzip '((1) (2))) '((1 . 2))))
  (should (equal (-unzip '((1 2) (3))) '((1 . 3))))
  (should (equal (-unzip '((1) (2 3))) '((1 . 2))))
  (should (equal (-unzip '((1 2) (3 4))) '((1 . 3) (2 . 4))))
  (should (equal (-unzip '(nil nil nil)) nil))
  (should (equal (-unzip '((1) nil nil)) nil))
  (should (equal (-unzip '(nil (1) nil)) nil))
  (should (equal (-unzip '(nil nil (1))) nil))
  (should (equal (-unzip '((1) (2) nil)) nil))
  (should (equal (-unzip '((1) nil (2))) nil))
  (should (equal (-unzip '(nil (1) (2))) nil))
  (should (equal (-unzip '((1) (2) (3))) '((1 2 3))))
  (should (equal (-unzip '((1 2) (3) (4))) '((1 3 4))))
  (should (equal (-unzip '((1) (2 3) (4))) '((1 2 4))))
  (should (equal (-unzip '((1) (2) (3 4))) '((1 2 3))))
  (should (equal (-unzip '((1 2) (3 4) (5 6))) '((1 3 5) (2 4 6))))
  (should (equal (-unzip '((1 2 3) (4 5 6) (7 8 9))) '((1 4 7) (2 5 8) (3 6 9)))))

(ert-deftest -pad ()
  "-pad"
  (should (equal (-pad 0 'nil) '(nil)))
  (should (equal (-pad 0 '(1 2) '(3 4)) '((1 2) (3 4))))
  (should (equal (-pad 0 '(1 2) '(3 4 5 6) '(7 8 9)) '((1 2 0 0) (3 4 5 6) (7 8 9 0))))
  (should (equal (-pad 0) nil))
  (should (equal (-pad 0 nil nil) '(nil nil)))
  (should (equal (-pad 0 '(1)) '((1))))
  (should (equal (-pad 0 '(1) '(1)) '((1) (1))))
  (should (equal (-pad 0 '(1 2 3) '(4 5)) '((1 2 3) (4 5 0))))
  (should (equal (-pad nil nil) '(nil)))
  (should (equal (-pad nil nil nil) '(nil nil)))
  (should (equal (-pad nil '(nil nil) '(nil) '(nil nil nil nil nil))
		 '((nil nil nil nil nil) (nil nil nil nil nil) (nil nil nil nil nil)))))

(ert-deftest -table ()
  "-table"
  (should (equal (-table '* '(1 2 3) '(1 2 3)) '((1 2 3) (2 4 6) (3 6 9))))
  (should (equal (-table (lambda (a b) (-sum (-zip-with '* a b)))
			 '((1 2) (3 4)) '((1 3) (2 4)))
		 '((7 15) (10 22))))
  (should (equal (apply '-table 'list (-repeat 3 '(1 2)))
		 '((((1 1 1) (2 1 1)) ((1 2 1) (2 2 1)))
		   (((1 1 2) (2 1 2)) ((1 2 2) (2 2 2)))))))

(ert-deftest -table-flat ()
  "-table-flat"
  (should (equal (-table-flat 'list '(1 2 3) '(a b c))
		 '((1 a) (2 a) (3 a) (1 b) (2 b) (3 b) (1 c) (2 c) (3 c))))
  (should (equal (-table-flat '* '(1 2 3) '(1 2 3)) '(1 2 3 2 4 6 3 6 9)))
  (should (equal (apply '-table-flat 'list (-repeat 3 '(1 2)))
		 '((1 1 1) (2 1 1) (1 2 1) (2 2 1) (1 1 2) (2 1 2) (1 2 2) (2 2 2))))
  (should (equal (-table-flat '+ '(2)) '(2)))
  (should (equal (-table-flat '- '(2 4)) '(-2 -4)))
  (should (equal (-flatten-n 1 (-table 'list '(1 2 3) '(a b c)))
		 '((1 a) (2 a) (3 a) (1 b) (2 b) (3 b) (1 c) (2 c) (3 c))))
  (should (equal (-flatten-n 1 (-table '* '(1 2 3) '(1 2 3))) '(1 2 3 2 4 6 3 6 9)))
  (should (equal (-flatten-n 2 (apply '-table 'list (-repeat 3 '(1 2))))
		 '((1 1 1) (2 1 1) (1 2 1) (2 2 1) (1 1 2) (2 1 2) (1 2 2) (2 2 2)))))

(ert-deftest -first ()
  "-first --first"
  (should (equal (-first #'natnump '(-1 0 1)) 0))
  (should (equal (-first #'null '(1 2 3)) nil))
  (should (equal (--first (> it 2) '(1 2 3)) 3))
  (should (equal (let ((c 0)) (--first (setq c (1+ c)) '(nil nil nil)) c) 1))
  (should (equal (--first nil '(1 2 3)) nil))
  (should (equal (--first nil '(1)) nil))
  (should (equal (--first nil 'nil) nil))
  (should (equal (-first #'ignore '(1 2 3)) nil))
  (should (equal (-first #'ignore '(1)) nil))
  (should (equal (-first #'ignore 'nil) nil))
  (should (equal (--first (not it) '(1 2 nil)) nil))
  (should (equal (--first (not it) '(nil 1 2)) nil))
  (should (equal (--first (not it) '(nil)) nil))
  (should (equal (--first (not it) 'nil) nil))
  (should (equal (-first #'null '(1 2 nil)) nil))
  (should (equal (-first #'null '(nil 1 2)) nil))
  (should (equal (-first #'null '(nil)) nil))
  (should (equal (-first #'null 'nil) nil))
  (should (equal (--first t '(1 2 3)) 1))
  (should (equal (--first t '(1)) 1))
  (should (equal (--first t 'nil) nil))
  (should (equal (-first #'identity '(1 2 3)) 1))
  (should (equal (-first #'identity '(1)) 1))
  (should (equal (-first #'identity 'nil) nil)))

(ert-deftest -last ()
  "-last --last"
  (should (equal (-last 'cl-evenp '(1 2 3 4 5 6 3 3 3)) 6))
  (should (equal (-last 'cl-evenp '(1 3 7 5 9)) nil))
  (should (equal (--last (> (length it) 3)
			 '("a" "looong" "word" "and" "short" "one"))
		 "short")))

(ert-deftest -first-item ()
  "-first-item"
  (should (equal (-first-item 'nil) 'nil))
  (should (equal (-first-item '(1 2 3 4 5)) 1))
  (should (equal (let ((list (list 1 2 3)))
		   (setf (-first-item list) 5) list)
		 '(5 2 3)))
  (should-error (-first-item 1) :type 'wrong-type-argument))

(ert-deftest -second-item ()
  "-second-item"
  (should (equal (-second-item 'nil) 'nil))
  (should (equal (-second-item '(1 2 3 4 5)) 2))
  (should (equal (let ((list (list 1 2))) (setf (-second-item list) 5) list) '(1 5)))
  (should (equal (-second-item '(1)) 'nil))
  (should-error (-second-item 1) :type 'wrong-type-argument))

(ert-deftest -third-item ()
  "-third-item"
  (should (equal (-third-item 'nil) 'nil))
  (should (equal (-third-item '(1 2)) 'nil))
  (should (equal (-third-item '(1 2 3 4 5)) 3))
  (should-error (-third-item 1) :type 'wrong-type-argument))

(ert-deftest -fourth-item ()
  "-fourth-item"
  (should (equal (-fourth-item 'nil) 'nil))
  (should (equal (-fourth-item '(1 2 3)) 'nil))
  (should (equal (-fourth-item '(1 2 3 4 5)) 4))
  (should-error (-fourth-item 1) :type 'wrong-type-argument))

(ert-deftest -fifth-item ()
  "-fifth-item"
  (should (equal (-fifth-item 'nil) 'nil))
  (should (equal (-fifth-item '(1 2 3 4)) 'nil))
  (should (equal (-fifth-item '(1 2 3 4 5)) 5))
  (should-error (-fifth-item 1) :type 'wrong-type-argument))

(ert-deftest -last-item ()
  "-last-item"
  (should (equal (-last-item 'nil) 'nil))
  (should (equal (-last-item '(1 2 3 4 5)) 5))
  (should (equal (let ((list (list 1 2 3))) (setf (-last-item list) 5) list) '(1 2 5)))
  (should (equal (-last-item '(1)) 1))
  (should-error (-last-item 1) :type 'wrong-type-argument))

(ert-deftest -butlast ()
  "-butlast"
  (should (equal (-butlast '(1 2 3)) '(1 2)))
  (should (equal (-butlast '(1 2)) '(1)))
  (should (equal (-butlast '(1)) nil))
  (should (equal (-butlast nil) nil)))

(ert-deftest -sort ()
  "-sort --sort"
  (should (equal (-sort #'< '(3 1 2)) '(1 2 3)))
  (should (equal (-sort #'> '(3 1 2)) '(3 2 1)))
  (should (equal (--sort (< it other) '(3 1 2)) '(1 2 3)))
  (should (equal (let ((l '(3 1 2))) (ignore (-sort #'> l)) l) '(3 1 2))))

(ert-deftest -list ()
  "-list"
  (should (equal (-list 1) '(1)))
  (should (equal (-list 'nil) 'nil))
  (should (equal (-list '(1 2 3)) '(1 2 3)))
  (should (equal (with-no-warnings (-list 1 2 3)) '(1 2 3)))
  (should (equal (let ((l (list 1 2))) (setcar (-list l) 3) l) '(3 2)))
  (should (equal (let ((l (list 1 2))) (setcar (apply #'-list l) 3) l) '(1 2)))
  (should (equal (-list '((1) (2))) '((1) (2))))
  (should (equal (with-no-warnings (-list)) nil))
  (should (equal (with-no-warnings (-list nil 1)) nil))
  (should (equal (with-no-warnings (-list nil nil)) nil))
  (should (equal (with-no-warnings (-list 1 nil)) '(1 nil)))
  (should (equal (with-no-warnings (-list 1 '(2))) '(1 (2))))
  (should (equal (-list '(nil)) '(nil)))
  (should (equal (-list '(nil 1)) '(nil 1))))

(ert-deftest -fix ()
  "-fix --fix"
  (should (equal (-fix (lambda (l) (-non-nil (--mapcat (-split-at (/ (length it) 2) it) l)))
		       '((1 2 3)))
		 '((1) (2) (3))))
  (should (equal (let ((l '((starwars scifi) (jedi starwars warrior))))
		   (--fix (-uniq (--mapcat (cons it (cdr (assq it l))) it))
			  '(jedi book)))
		 '(jedi starwars warrior scifi book))))

(ert-deftest -tree-seq ()
  "-tree-seq --tree-seq"
  (should (equal (-tree-seq 'listp 'identity '(1 (2 3) 4 (5 (6 7))))
		 '((1 (2 3) 4 (5 (6 7))) 1 (2 3) 2 3 4 (5 (6 7)) 5 (6 7) 6 7)))
  (should (equal (-tree-seq 'listp 'reverse '(1 (2 3) 4 (5 (6 7))))
		 '((1 (2 3) 4 (5 (6 7))) (5 (6 7)) (6 7) 7 6 5 4 (2 3) 3 2 1)))
  (should (equal (--tree-seq (vectorp it) (append it nil) [1 [2 3] 4 [5 [6 7]]])
		 '([1 [2 3] 4 [5 [6 7]]] 1 [2 3] 2 3 4 [5 [6 7]] 5 [6 7] 6 7))))

(ert-deftest -tree-map ()
  "-tree-map --tree-map"
  (should (equal (-tree-map '1+ '(1 (2 3) (4 (5 6) 7))) '(2 (3 4) (5 (6 7) 8))))
  (should (equal (-tree-map '(lambda (x) (cons x (expt 2 x))) '(1 (2 3) 4))
		 '((1 . 2) ((2 . 4) (3 . 8)) (4 . 16))))
  (should (equal (--tree-map (length it)
			     '("<body>" ("<p>" "text" "</p>") "</body>"))
		 '(6 (3 4 4) 7)))
  (should (equal (--tree-map 1 '(1 2 (3 4) (5 6))) '(1 1 (1 1) (1 1))))
  (should (equal (--tree-map (cdr it) '((1 . 2) (3 . 4) (5 . 6))) '(2 4 6))))

(ert-deftest -tree-map-nodes ()
  "-tree-map-nodes --tree-map-nodes"
  (should (equal (-tree-map-nodes 'vectorp (lambda (x) (-sum (append x nil)))
				  '(1 [2 3] 4 (5 [6 7] 8)))
		 '(1 5 4 (5 13 8))))
  (should (equal (-tree-map-nodes 'keywordp (lambda (x) (symbol-name x))
				  '(1 :foo 4 ((5 6 :bar) :baz 8)))
		 '(1 ":foo" 4 ((5 6 ":bar") ":baz" 8))))
  (should (equal (--tree-map-nodes
		  (eq (car-safe it) 'add-mode)
		  (-concat it (list :mode 'emacs-lisp-mode))
		  '(with-mode emacs-lisp-mode (foo bar)
			      (add-mode a b) (baz (add-mode c d))))
		 '(with-mode emacs-lisp-mode (foo bar)
			     (add-mode a b :mode emacs-lisp-mode)
			     (baz (add-mode c d :mode emacs-lisp-mode))))))

(ert-deftest -tree-reduce ()
  "-tree-reduce --tree-reduce"
  (should (equal (-tree-reduce '+ '(1 (2 3) (4 5))) 15))
  (should (equal (-tree-reduce 'concat
			       '("strings" (" on" " various") ((" levels"))))
		 "strings on various levels"))
  (should (equal (--tree-reduce
		  (cond ((stringp it) (concat it " " acc))
			(t (let ((sn (symbol-name it)))
			     (concat "<" sn ">" acc "</" sn ">"))))
		  '(body (p "some words")
			 (div "more" (b "bold") "words")))
		 "<body><p>some words</p> <div>more <b>bold</b> words</div></body>")))

(ert-deftest -tree-reduce-from ()
  "-tree-reduce-from --tree-reduce-from"
  (should (equal (-tree-reduce-from '+ 1 '(1 (1 1) ((1)))) 8))
  (should (equal (--tree-reduce-from (-concat acc (list it)) nil '(1 (2 3 (4 5)) (6 7)))
		 '((7 6) ((5 4) 3 2) 1))))

(ert-deftest -tree-mapreduce ()
  "-tree-mapreduce --tree-mapreduce"
  (should (equal (-tree-mapreduce 'list 'append '(1 (2 (3 4) (5 6)) (7 (8 9))))
		 '(1 2 3 4 5 6 7 8 9)))
  (should (equal (--tree-mapreduce 1 (+ it acc) '(1 (2 (4 9) (2 1)) (7 (4 3)))) 9))
  (should (equal (--tree-mapreduce 0 (max acc (1+ it)) '(1 (2 (4 9) (2 1)) (7 (4 3))))
		 3))
  (should (equal (--tree-mapreduce (-value-to-list it) (-concat it acc)
				   '((1 . 2) (3 . 4) (5 (6 7) 8)))
		 '(1 2 3 4 5 6 7 8)))
  (should (equal (--tree-mapreduce
		  (if (-cons-pair? it) (cdr it) it)
		  (concat it " " acc)
		  '("foo" (bar . "bar") ((baz . "baz")) "quux" (qwop . "qwop")))
		 "foo bar baz quux qwop"))
  (should (equal (--tree-mapreduce
		  (if (-cons-pair? it) (list (cdr it)) nil)
		  (append it acc)
		  '((elisp-mode (foo (bar . booze)) (baz . qux))
		    (c-mode (foo . bla) (bum . bam))))
		 '(booze qux bla bam))))

(ert-deftest -tree-mapreduce-from ()
  "-tree-mapreduce-from --tree-mapreduce-from"
  (should (equal (-tree-mapreduce-from 'identity '* 1 '(1 (2 (3 4) (5 6)) (7 (8 9))))
		 362880))
  (should (equal (--tree-mapreduce-from
		  (+ it it)
		  (cons it acc) nil
		  '(1 (2 (4 9) (2 1)) (7 (4 3))))
		 '(2 (4 (8 18) (4 2)) (14 (8 6)))))
  (should (equal
	   (concat
	    "{"
	    (--tree-mapreduce-from
	     (cond ((-cons-pair? it)
		    (concat (symbol-name (car it)) " -> "
			    (symbol-name (cdr it))))
		   (t (concat (symbol-name it) " : {")))
	     (concat it (unless (or (equal acc "}")
				    (equal (substring it (1- (length it))) "{"))
			  ", ")
		     acc)
	     "}"
	     '((elisp-mode (foo (bar . booze)) (baz . qux))
	       (c-mode (foo . bla) (bum . bam)))))
	   "{elisp-mode : {foo : {bar -> booze}, baz -> qux}, \
c-mode : {foo -> bla, bum -> bam}}")))

(ert-deftest -clone ()
  "-clone"
  (should (equal (let* ((a (list (list 1))) (b (-clone a))) (setcar (car a) 2) b)
		 '((1)))))

(ert-deftest -> ()
  "->"
  (should (equal (-> '(2 3 5)) '(2 3 5)))
  (should (equal (-> '(2 3 5) (append '(8 13))) '(2 3 5 8 13)))
  (should (equal (-> '(2 3 5) (append '(8 13)) (-slice 1 -1)) '(3 5 8)))
  (should (equal (-> 5 square) 25))
  ;;(should (equal (-> 5 (lambda (x) (* x x))) 25))
  (should (equal (-> 5 (+ 3) square) 64))
  ;;(should (equal (-> 5 (+ 3) (lambda (x) (* x x))) 64))
  )

(ert-deftest ->> ()
  "->>"
  (should (equal (->> '(1 2 3) (-map #'square)) '(1 4 9)))
  (should (equal (->> '(1 2 3) (-map (lambda (x) (* x x)))) '(1 4 9)))
  (should (equal (->> '(1 2 3) (-map #'square) (-remove #'cl-evenp)) '(1 9)))
  (should (equal (->> '(1 2 3) (-map (lambda (x) (* x x))) (-remove #'cl-evenp)) '(1 9)))
  (should (equal (->> '(1 2 3) (-map #'square) (-reduce #'+)) 14))
  (should (equal (->> '(1 2 3) (-map '(lambda (x) (* x x))) (-reduce '+)) 14))
  (should (equal (->> 5 (- 8)) 3))
  (should (equal (->> 5 (- 3) square) 4))
  ;;(should (equal (->> 5 (- 3) (lambda (x) (* x x))) 4))
  )

(ert-deftest --> ()
  "-->"
  (should (equal (--> "def" (concat "abc" it "ghi")) "abcdefghi"))
  (should (equal (--> "def" (concat "abc" it "ghi") (upcase it)) "ABCDEFGHI"))
  (should (equal (--> "def" (concat "abc" it "ghi") upcase) "ABCDEFGHI"))
  (should (equal (--> "def" upcase) "DEF"))
  (should (equal (--> 3 (car (list it))) 3))
  (should (equal (--> '(1 2 3 4) (--map (1+ it) it)) '(2 3 4 5)))
  (should (equal (--map (--> it (1+ it)) '(1 2 3 4)) '(2 3 4 5)))
  (should (equal (--filter (--> it (equal 0 (mod it 2))) '(1 2 3 4)) '(2 4)))
  (should (equal (--> '(1 2 3 4) (--filter (equal 0 (mod it 2)) it)) '(2 4)))
  (should (equal (--annotate (--> it (< 1 it)) '(0 1 2 3))
		 '((nil . 0) (nil . 1) (t . 2) (t . 3))))
  (should (equal (--> '(0 1 2 3) (--annotate (< 1 it) it))
		 '((nil . 0) (nil . 1) (t . 2) (t . 3)))))

(ert-deftest -as-> ()
  "-as->"
  (should (equal (-as-> 3 my-var (1+ my-var)
			(list my-var) (mapcar (lambda (ele) (* 2 ele)) my-var))
		 '(8)))
  (should (equal (-as-> 3 my-var 1+) 4))
  (should (equal (-as-> 3 my-var) 3))
  (should (equal (-as-> "def" string (concat "abc" string "ghi")) "abcdefghi"))
  (should (equal (-as-> "def" string (concat "abc" string "ghi") upcase) "ABCDEFGHI"))
  (should (equal (-as-> "def" string (concat "abc" string "ghi") (upcase string))
		 "ABCDEFGHI")))

(ert-deftest -some-> ()
  "-some->"
  (should (equal (-some-> '(2 3 5)) '(2 3 5)))
  (should (equal (-some-> 5 square) 25))
  ;;(should (equal (-some-> 5 (lambda (x) (* x x))) 25))
  (should (equal (-some-> 5 cl-evenp square) nil))
  ;;(should (equal (-some-> 5 cl-evenp (lambda (x) (* x x))) nil))
  (should (equal (-some-> nil square) nil))
  ;;(should (equal (-some-> nil (lambda (x) (* x x))) nil))
  )

(ert-deftest -some->> ()
  "-some->>"
  (should (equal (-some->> '(1 2 3) (-map #'square)) '(1 4 9)))
  (should (equal (-some->> '(1 2 3) (-map (lambda (x) (* x x)))) '(1 4 9)))
  (should (equal (-some->> '(1 3 5) (-last 'cl-evenp) (+ 100)) nil))
  (should (equal (-some->> '(2 4 6) (-last 'cl-evenp) (+ 100)) 106))
  (should (equal (-some->> '("A" "B" :c) (-filter 'stringp) (-reduce 'concat)) "AB"))
  (should (equal (-some->> '(:a :b :c) (-filter 'stringp) (-reduce 'concat)) nil)))

(ert-deftest -some--> ()
  "-some-->"
  (should (equal (-some--> "def" (concat "abc" it "ghi")) "abcdefghi"))
  (should (equal (-some--> nil (concat "abc" it "ghi")) nil))
  (should (equal (-some--> '(0 1) (-remove #'natnump it) (append it it) (-map #'1+ it))
		 'nil))
  (should (equal (-some--> '(0 1) (-filter #'natnump it) (append it it) (-map #'1+ it))
		 '(1 2 1 2)))
  ;; FIXME: Is there a better way to have this compile without warnings?
  (should (equal (should-error (eval '(-some--> 1 nil) t)) '(void-function nil)))
  (should (equal (-some--> nil) nil))
  (should (equal (-some--> t) t)))

(ert-deftest -doto ()
  "-doto --doto"
  (should (equal (-doto (list 1 2 3) pop pop) '(3)))
  (should (equal (-doto (cons 1 2) (setcar 3) (setcdr 4)) '(3 . 4)))
  (should (equal (gethash 'k (--doto (make-hash-table) (puthash 'k 'v it))) 'v))
  (should (equal (-doto (cons 1 2)) '(1 . 2))))

(ert-deftest -when-let ()
  "-when-let --when-let"
  (should (equal (-when-let (match-index (string-match "d" "abcd")) (+ match-index 2))
		 5))
  (should (equal (-when-let ((&plist :foo foo) (list :foo "foo")) foo) "foo"))
  (should (equal (-when-let ((&plist :foo foo) (list :bar "bar")) foo) nil))
  (should (equal (--when-let (member :b '(:a :b :c)) (cons :d it)) '(:d :b :c)))
  (should (equal (--when-let (stringp nil) (cons it :a)) nil))
  (should (equal (--when-let (stringp (list nil)) (cons it :a)) nil)))

(ert-deftest -when-let* ()
  "-when-let*"
  (should (equal (-when-let* ((x 5) (y 3) (z (+ y 4))) (+ x y z)) 15))
  (should (equal (-when-let* ((x 5) (y nil) (z 7)) (+ x y z)) nil)))

(ert-deftest -if-let ()
  "-if-let --if-let"
  (should (equal (-if-let (match-index (string-match "d" "abc")) (+ match-index 3) 7)
		 7))
  (should (equal (--if-let (cl-evenp 4) it nil) t)))

(ert-deftest -if-let* ()
  "-if-let*"
  (should (equal (-if-let* ((x 5) (y 3) (z 7)) (+ x y z) "foo") 15))
  (should (equal (-if-let* ((x 5) (y nil) (z 7)) (+ x y z) "foo") "foo"))
  (should (equal (-if-let* (((_ _ x) '(nil nil 7))) x) 7)))

(ert-deftest -let ()
  "-let"
  (should (equal (-let (([a (b c) d] [1 (2 3) 4])) (list a b c d)) '(1 2 3 4)))
  (should (equal (-let [(a b c . d) (list 1 2 3 4 5 6)] (list a b c d))
		 '(1 2 3 (4 5 6))))
  (should (equal (-let [(&plist :foo foo :bar bar)
			(list :baz 3 :foo 1 :qux 4 :bar 2)]
		   (list foo bar))
		 '(1 2)))
  (should (equal (let ((a (list 1 2 3)) (b (list 'a 'b 'c)))
		   (-let (((a . b) a) ((c . d) b)) (list a b c d)))
		 '(1 (2 3) a (b c))))
  (should (equal (-let ((a "foo") (b "bar")) (list a b)) '("foo" "bar")))
  (should (equal (-let [foo (list 1 2 3)] foo) '(1 2 3)))
  (should (equal (-let [(&plist :foo foo :bar bar)
			(list :foo 1 :bar 2)]
		   (list foo bar))
		 '(1 2)))
  (should (equal (-let [(&plist :foo (a b) :bar c) (list :foo (list 1 2) :bar 3)]
		   (list a b c))
		 '(1 2 3)))
  (should (equal (-let [(&plist :foo (a b)) (list :bar 1)] (list a b))
		 '(nil nil)))
  (should (equal (-let [(&plist :foo (&plist :baz baz) :bar bar)
			(list :foo (list 1 2 :baz 2 :bar 4) :bar 3)]
		   (list baz bar))
		 '(2 3)))
  (should (equal (-let [(_ (&plist :level level :title title))
			(list 'paragraph (list :title "foo" :level 2))]
		   (list level title))
		 '(2 "foo")))
  (should (equal (-let [(&alist :foo (&plist 'face face 'invisible inv) :bar bar)
			(list (cons :bar 2)
			      (cons :foo (list 'face 'foo-face 'invisible t)))]
		   (list bar face inv))
		 '(2 foo-face t)))
  (should (equal (-let [(a (b c) d) (list 1 (list 2 3) 4 5 6)]
		   (list a b c d))
		 '(1 2 3 4)))
  (should (equal (-let [[a _ c] [1 2 3 4]] (list a c)) '(1 3)))
  (should (equal (-let [[_ _ _ a] (vector 1 2 3 4)] a) 4))
  (should (equal (-let [[a _ _ _ b] (vector 1 2 3 4 5)] (list a b)) '(1 5)))
  (should (equal (-let [[a (b c) d] [1 (2 3) 4]] (list a b c d)) '(1 2 3 4)))
  (should (equal (-let [[a b c] (string 102 111 98 97 114)] (list a b c))
		 '(102 111 98)))
  (should (equal (-let [[a b c] "abcdef"] (list a b c)) '(97 98 99)))
  (should (equal (-let [[a (b [c]) d] [1 (2 [3 4]) 5 6]] (list a b c d)) '(1 2 3 5)))
  (should (equal (-let [(a b c d) (list 1 2 3 4 5 6)] (list a b c d)) '(1 2 3 4)))
  (should (equal (-let [([a b]) (list (vector 1 2 3))] (list a b)) '(1 2)))
  (should (equal (-let [(a b c d) (list 1 2 3)] (list a b c d)) '(1 2 3 nil)))
  (should (equal (-let [[a b c] [1 2 3 4]] (list a b c)) '(1 2 3)))
  (should (equal (-let [[a] [1 2 3 4]] a) 1))
  (should (equal (-let [[a b &rest c] "abcdef"] (list a b c)) '(97 98 "cdef")))
  (should (equal (-let [[a b &rest c] [1 2 3 4 5 6]] (list a b c)) '(1 2 [3 4 5 6])))
  (should (equal (-let [[a b &rest [c d]] [1 2 3 4 5 6]] (list a b c d)) '(1 2 3 4)))
  (should-error (-let [[a b c d] [1 2 3]] (+ a b c d)) :type 'args-out-of-range)
  (should (equal (-let [(a b . c) (cons 1 (cons 2 3))] (list a b c)) '(1 2 3)))
  (should (equal (-let [(_ _ . [a b]) (cons 1 (cons 2 (vector 3 4)))] (list a b))
		 '(3 4)))
  (should (equal (-let [(_ _ a b) (cons 1 (cons 2 (list 3 4)))] (list a b)) '(3 4)))
  (should (equal (-let [([a b] _ _ c) (list (vector 1 2) 3 4 5)] (list a b c)) '(1 2 5)))
  (should (equal (-let [(((a))) (list (list (list 1 2) 3) 4)] a) 1))
  (should (equal (-let [(((a b) c) d) (list (list (list 1 2) 3) 4)]
		   (list a b c d))
		 '(1 2 3 4)))
  (should (equal (-let [(((a b) . c) . d)
			(list (list (list 1 2) 3) 4)]
		   (list a b c d))
		 '(1 2 (3) (4))))
  (should (equal (-let [(((a b) c)) (list (list (list 1 2) 3) 4)]
		   (list a b c))
		 '(1 2 3)))
  (should (equal (-let [(((a b) . c)) (list (list (list 1 2) 3) 4)]
		   (list a b c))
		 '(1 2 (3))))
  (should (equal (-let [(_ (_ (_ a))) (list 1 (list 2 (list 3 4)))] a) 4))
  (should (equal (-let [(_ (a)) (list 1 (list 2))] a) 2))
  (should (equal (-let [(_ _ _ a) (list 1 2 3 4 5)] a) 4))
  (should (equal (-let [(_ _ _ (a b)) (list 1 2 3 (list 4 5))] (list a b)) '(4 5)))
  (should (equal (-let [(_ a _ b) (list 1 2 3 4 5)] (list a b)) '(2 4)))
  (should (equal (-let [(_ a _ b _ c) (list 1 2 3 4 5 6)] (list a b c)) '(2 4 6)))
  (should (equal (-let [(_ a _ b _ _ _ c) (list 1 2 3 4 5 6 7 8)] (list a b c))
		 '(2 4 8)))
  (should (equal (-let [(_ a _ _ _ b _ c) (list 1 2 3 4 5 6 7 8)] (list a b c))
		 '(2 6 8)))
  (should (equal (-let [(_ _ _ a _ _ _ b _ _ _ c) (list 1 2 3 4 5 6 7 8 9 10 11 12)]
		   (list a b c))
		 '(4 8 12)))
  (should (equal (-let [(_ (a b) _ c) (list 1 (list 2 3) 4 5)] (list a b c)) '(2 3 5)))
  (should (equal (-let [(_ (a b) _ . c) (list 1 (list 2 3) 4 5)] (list a b c))
		 '(2 3 (5))))
  (should (equal (-let [(_ (a b) _ (c d)) (list 1 (list 2 3) 4 (list 5 6))]
		   (list a b c d))
		 '(2 3 5 6)))
  (should (equal (-let [(_ (a b) _ _ _ (c d)) (list 1 (list 2 3) 4 5 6 (list 7 8))]
		   (list a b c d))
		 '(2 3 7 8)))
  (should (equal (-let [(_ (a b) _ c d) (list 1 (list 2 3) 4 5 6)] (list a b c d))
		 '(2 3 5 6)))
  (should (equal (-let [(_ (a b) _ _ _ [c d]) (list 1 (list 2 3) 4 5 6 (vector 7 8))]
		   (list a b c d))
		 '(2 3 7 8)))
  (should (equal (-let [(_ [a b] _ _ _ [c d]) (list 1 (vector 2 3) 4 5 6 (vector 7 8))]
		   (list a b c d))
		 '(2 3 7 8)))
  (should (equal (-let [(_ _ _ . a) (list 1 2 3 4 5)] a) '(4 5)))
  (should (equal (-let [(_ a _ _) (list 1 2 3 4 5)] a) 2))
  (should (equal (-let [(_ . b) (cons 1 2)] b) 2))
  (should (equal (-let [([a b c d] . e) (cons (vector 1 2 3 4) 5)] (list a b c d e))
		 '(1 2 3 4 5)))
  (should (equal (-let [([a b c d] _ . e) (cons (vector 1 2 3 4) (cons 5 6))]
		   (list a b c d e))
		 '(1 2 3 4 6)))
  (should (equal (-let [(((a))) (list (list (list 1 2) 3) 4)] a) 1))
  (should (equal (-let [(((&plist :foo a :bar b)))
			(list (list (list :bar 1 :foo 2) 3) 4)]
		   (list a b))
		 '(2 1)))
  (should (equal (-let [(((a b) c) d) (list (list (list 1 2) 3) 4)] (list a b c d))
		 '(1 2 3 4)))
  (should (equal (-let [(((a b) c) . d) (list (list (list 1 2) 3) 4)] (list a b c d))
		 '(1 2 3 (4))))
  (should (equal (-let [(((a b) c)) (list (list (list 1 2) 3) 4)] (list a b c))
		 '(1 2 3)))
  (should (equal (-let [(a b c d) (list 1 2 3 4)] (list a b c d)) '(1 2 3 4)))
  (should (equal (-let [(a) (list 1 2 3 4)] (list a)) '(1)))
  (should (equal (-let [(_ a) (list 1 2 3 4)] (list a)) '(2)))
  (should (equal (-let [(_ _ a) (list 1 2 3 4)] (list a)) '(3)))
  (should (equal (-let [(_ _ . a) (list 1 2 3 4)] a) '(3 4)))
  (should (equal (-let [(_ _ [a b]) (list 1 2 (vector 3 4))] (list a b)) '(3 4)))
  (should (equal (-let [(a _ _ b) (list 1 2 3 4 5 6 7 8)] (list a b)) '(1 4)))
  (should (equal (-let [(_ _ a _ _ b) (list 1 2 3 4 5 6 7 8)] (list a b)) '(3 6)))
  (should (equal (-let [(_ _ a _ _ . b) (list 1 2 3 4 5 6 7 8)] (cons a b)) '(3 6 7 8)))
  (should (equal (-let [(_ a _ b) (list 1 2 3 4)] (list a b)) '(2 4)))
  (should (equal (-let [(a b c (d e)) (list 1 2 3 (list 4 5))] (list a b c d e))
		 '(1 2 3 4 5)))
  (should (equal (-let [(_ _ (_ _ (_ _ a))) (list 1 2 (list 3 4 (list 5 6 7)))] a) 7))
  (should (equal (-let [(_ (_ (_ a))) (list 1 (list 2 (list 3 4)))] a) 4))
  (should (equal (-let [(_ _ &plist :foo a :bar b) (list 1 2 :bar 2 :foo 1)] (list a b))
		 '(1 2)))
  (should (equal (-let [(_ _ &keys :foo a :bar b) (list 1 2 :bar 4 :foo 3)] (list a b))
		 '(3 4)))
  (should (equal (-let [(a _ &keys :foo b :bar c) (list 1 2 :bar 4 :foo 3)]
		   (list a b c))
		 '(1 3 4)))
  (should (equal (-let [(a _ _ _ &keys :foo b :bar c) (list 1 2 3 4 :bar 6 :foo 5)]
		   (list a b c))
		 '(1 5 6)))
  (should (equal (-let [(a b &keys :foo c :bar d) (list 1 2 :bar 4 :foo 3)]
		   (list a b c d))
		 '(1 2 3 4)))
  (should (equal (-let [(a b &keys) (list 1 2 :bar 4 :foo 3)] (list a b)) '(1 2)))
  (should (equal (-let [(&keys :foo a :bar b) (list 1 2 :bar 4 :foo 3)] (list a b))
		 '(3 4)))
  (should (equal (-let [(a b
			   (c _ _ &keys :foo
			      [d _ (&alist :bar (e &keys :baz f)
					   :qux (&plist :fux g))]
			      :mux h)
			   i)
			(list 1 2
			 (list 3 'skip 'skip :foo
			       (vector 4 'skip
				       (list (cons :bar (list 5 :baz 6))
					     (cons :qux (list :fux 7))))
			       :mux 8)
			 9)]
		   (list a b c d e f g h i))
		 '(1 2 3 4 5 6 7 8 9)))
  (should (equal (-let [[_ [_ [_ a]]] (vector 1 (vector 2 (vector 3 4)))] a) 4))
  (should (equal (-let [[a _ _ _] (vector 1 2 3 4)] a) 1))
  (should (equal (-let [[_ _ _ a] (vector 1 2 3 4)] a) 4))
  (should (equal (-let [[_ _ a _] (vector 1 2 3 4)] a) 3))
  (should (equal (-let [[a [_ [_ b]]] (vector 1 (vector 2 (vector 3 4)))] (list a b))
		 '(1 4)))
  (should (equal (-let [[(a _ b)] (vector (list 1 2 3 4))] (list a b)) '(1 3)))
  (should (equal (-let [(&plist 'a a) (list 'a 1 'b 2)] a) 1))
  (should (equal (-let [(&plist 'a [a b]) (list 'a [1 2] 'b 3)] (list a b)) '(1 2)))
  (should (equal (-let [(&plist 'a [a b] 'c c) (list 'a [1 2] 'c 3)] (list a b c))
		 '(1 2 3)))
  (should (equal (-let (((x y &alist 'a a 'c c)
			 (list 1 2 '(a . b) '(e . f) '(g . h) '(c . d))))
		   (list x y a c))
		 '(1 2 b d)))
  (should (equal (-let (((_ _ &alist 'a a 'c c)
			 (list 1 2 '(a . b) '(e . f) '(g . h) '(c . d))))
		   (list a c))
		 '(b d)))
  (should (equal (-let (((x y &alist 'a a 'c c)
			 (list 1 2 '(a . b) '(e . f) '(g . h) '(c . d))))
		   (list x y a c))
		 '(1 2 b d)))
  (should (equal (-let (((_ _ &alist 'a a 'c c)
			 (list 1 2 '(a . b) '(e . f) '(g . h) '(c . d))))
		   (list a c))
		 '(b d)))
  (should (equal (-let (((x y (&alist 'a a 'c c))
			 (list 1 2 '((a . b) (e . f) (g . h) (c . d)))))
		   (list x y a c))
		 '(1 2 b d)))
  (should (equal (-let (((_ _ (&alist 'a a 'c c))
			 (list 1 2 '((a . b) (e . f) (g . h) (c . d)))))
		   (list a c))
		 '(b d)))
  (should (equal (-let (a) a) nil))
  (should (equal (-let ((a)) a) nil))
  (should (equal (-let (a b) (list a b)) '(nil nil)))
  (should (equal (-let ((a) (b)) (list a b)) '(nil nil)))
  (should (equal (-let (((&plist :foo :bar)
			 (list :foo 1 :bar 2)))
		   (list foo bar))
		 '(1 2)))
  (should (equal (-let (((&alist :foo :bar) (list (cons :foo 1) (cons :bar 2))))
		   (list foo bar))
		 '(1 2)))
  (should (equal (let ((hash (make-hash-table)))
		   (puthash :foo 1 hash) (puthash :bar 2 hash)
		   (-let (((&hash :foo :bar) hash)) (list foo bar)))
		 '(1 2)))
  (should (equal (-let (((&hash :foo (&hash? :bar)) (make-hash-table))) bar) nil))
  (should (equal (let* ((ht (make-hash-table :test #'equal))
			(fn (lambda (ht) (push 3 (gethash 'a ht)) ht)))
		   (puthash 'a nil ht)
		   (-let (((&hash? 'a) (funcall fn ht))) a))
		 '(3)))
  (should (equal (-let (((_ &keys :foo :bar) (list 'ignored :foo 1 :bar 2)))
		   (list foo bar))
		 '(1 2)))
  (should (equal (-let (((&plist :foo foo :bar) (list :foo 1 :bar 2))) (list foo bar))
		 '(1 2)))
  (should (equal (-let (((&plist :foo foo :bar bar) (list :foo 1 :bar 2)))
		   (list foo bar))
		 '(1 2)))
  (should (equal (-let (((&plist :foo x :bar y) (list :foo 1 :bar 2))) (list x y))
		 '(1 2)))
  (should (equal (-let (((&plist :foo (x) :bar [y])
			 (list :foo (list 1) :bar (vector 2))))
		   (list x y))
		 '(1 2)))
  (should (equal (-let (((&plist 'foo 'bar) (list 'foo 1 'bar 2))) (list foo bar))
		 '(1 2)))
  (should (equal (-let (((&plist 'foo foo 'bar) (list 'foo 1 'bar 2))) (list foo bar))
		 '(1 2)))
  (should (equal (-let (((&plist 'foo foo 'bar bar) (list 'foo 1 'bar 2)))
		   (list foo bar))
		 '(1 2)))
  (should (equal (-let (((&plist 'foo x 'bar y) (list 'foo 1 'bar 2))) (list x y))
		 '(1 2)))
  (should (equal (-let (((&alist "foo" "bar") (list (cons "foo" 1) (cons "bar" 2))))
		   (list foo bar))
		 '(1 2)))
  (should (equal (-let (((&alist "foo" x "bar") (list (cons "foo" 1) (cons "bar" 2))))
		   (list x bar))
		 '(1 2)))
  (should (equal (-let (((&alist "foo" x "bar" y) (list (cons "foo" 1) (cons "bar" 2))))
		   (list x y))
		 '(1 2)))
  (should (equal (-let (((&alist :a 'b "c") (list (cons :a 1) (cons 'b 2) (cons "c" 3))))
		   (list a b c))
		 '(1 2 3)))
  (should (equal (-let (((&alist 'b :a "c") (list (cons :a 1) (cons 'b 2) (cons "c" 3))))
		   (list a b c))
		 '(1 2 3)))
  (should (equal (-let (((&alist 'b "c" :a) (list (cons :a 1) (cons 'b 2) (cons "c" 3))))
		   (list a b c))
		 '(1 2 3)))
  (should (equal (-let (((&alist "c" 'b :a) (list (cons :a 1) (cons 'b 2) (cons "c" 3))))
		   (list a b c))
		 '(1 2 3)))
  (should (equal (-let (((&alist "c" :a 'b) (list (cons :a 1) (cons 'b 2) (cons "c" 3))))
		   (list a b c))
		 '(1 2 3)))
  (should (equal (-let (((&alist :a "c" 'b) (list (cons :a 1) (cons 'b 2) (cons "c" 3))))
		   (list a b c))
		 '(1 2 3)))
  (should-error (eval '(-let (((&plist 'foo 1) (list 'foo 'bar))) (list foo)) t)
		:type 'error)
  (should-error (eval '(-let (((&plist foo :bar) (list :foo :bar))) (list foo)) t)
		:type 'error)
  (should (equal (-let (((items &as first . rest) (list 1 2 3)))
		   (list first rest items))
		 '(1 (2 3) (1 2 3))))
  (should (equal (-let [(all &as [vect &as a b] bar) (list [1 2] 3)]
		   (list a b bar vect all))
		 '(1 2 3 [1 2] ([1 2] 3))))
  (should (equal (-let [(all &as (list &as a b) bar) (list (list 1 2) 3)]
		   (list a b bar list all))
		 '(1 2 3 (1 2) ((1 2) 3))))
  (should (equal (-let [(x &as [a b]) (list (vector 1 2 3))] (list a b x))
		 '(1 2 ([1 2 3]))))
  (should (equal (-let [(result &as [_ a] [_ b]) (list [1 2] [3 4])] (list a b result))
		 '(2 4 ([1 2] [3 4]))))
  (should (equal (-let [(result &as [fst &as _ a] [snd &as _ b]) (list [1 2] [3 4])]
		   (list a b fst snd result))
		 '(2 4 [1 2] [3 4] ([1 2] [3 4]))))
  (should (equal (-let [[x &as a b &rest r] (vector 1 2 3)] (list a b r x))
		 '(1 2 [3] [1 2 3])))
  (should (equal (-let [[x &as a] (vector 1 2 3)] (list a x)) '(1 [1 2 3])))
  (should (equal (-let [[x &as _ _ a] (vector 1 2 3)] (list a x)) '(3 [1 2 3])))
  (should (equal (-let [[x &as _ _ a] (vector 1 2 (list 3 4))] (list a x))
		 '((3 4) [1 2 (3 4)])))
  (should (equal (-let [[x &as _ _ (a b)] (vector 1 2 (list 3 4))] (list a b x))
		 '(3 4 [1 2 (3 4)])))
  (should (equal (-let [(b &as beg . end) (cons 1 2)] (list beg end b)) '(1 2 (1 . 2))))
  (should (equal (-let [(plist &as &plist :a a :b b) (list :a 1 :b 2)]
		   (list a b plist))
		 '(1 2 (:a 1 :b 2))))
  (should (equal (-let [(alist &as &alist :a a :b b) (list (cons :a 1) (cons :b 2))]
		   (list a b alist))
		 '(1 2 ((:a . 1) (:b . 2)))))
  (should (equal (-let [(list &as _ _ _ a _ _ _ b _ _ _ c)
			(list 1 2 3 4 5 6 7 8 9 10 11 12)]
		   (list a b c list))
		 '(4 8 12 (1 2 3 4 5 6 7 8 9 10 11 12))))
  (should (equal (-let (((x &as a b) (list 1 2))
			((y &as c d) (list 3 4)))
		   (list a b c d x y))
		 '(1 2 3 4 (1 2) (3 4))))
  (should (equal (-let (((&hash :key)
			 (--doto (make-hash-table) (puthash :key "value" it))))
		   key)
		 "value"))
  (should (equal (-let (((&plist :key) '(:key "value"))) key) "value")))

(ert-deftest -let* ()
  "-let*"
  (should (equal (-let* (((a . b) (cons 1 2)) ((c . d) (cons 3 4))) (list a b c d))
		 '(1 2 3 4)))
  (should (equal (-let* (((a . b) (cons 1 (cons 2 3))) ((c . d) b)) (list a b c d))
		 '(1 (2 . 3) 2 3)))
  (should (equal (-let* (((&alist "foo" foo "bar" bar)
			  (list (cons "foo" 1) (cons "bar" (list 'a 'b 'c))))
			 ((a b c) bar))
		   (list foo a b c bar))
		 '(1 a b c (a b c))))
  (should (equal (let ((a (list 1 2 3)) (b (list 'a 'b 'c)))
		   (ignore b)
		   (-let* (((a . b) a) ((c . d) b)) (list a b c d)))
		 '(1 (2 3) 2 (3))))
  (should (equal (-let* ((a "foo") (b a)) (list a b)) '("foo" "foo")))
  (should (equal (-let* (a) a) nil))
  (should (equal (-let* ((a)) a) nil))
  (should (equal (-let* (a b) (list a b)) '(nil nil)))
  (should (equal (-let* ((a) (b)) (list a b)) '(nil nil))))

(ert-deftest -lambda ()
  "-lambda"
  (should (equal (-map (-lambda ((x y)) (+ x y)) '((1 2) (3 4) (5 6))) '(3 7 11)))
  (should (equal (-map (-lambda ([x y]) (+ x y)) '([1 2] [3 4] [5 6])) '(3 7 11)))
  (should (equal (funcall (-lambda ((_ . a) (_ . b)) (-concat a b))
			  '(1 2 3) '(4 5 6))
		 '(2 3 5 6)))
  (should (equal (-map (-lambda ((&plist :a a :b b)) (+ a b))
		       '((:a 1 :b 2) (:a 3 :b 4) (:a 5 :b 6)))
		 '(3 7 11)))
  (should (equal (-map (-lambda (x) (let ((k (car x)) (v (cadr x))) (+ k v)))
		       '((1 2) (3 4) (5 6)))
		 '(3 7 11)))
  (should (equal (funcall (-lambda ((a) (b)) (+ a b)) '(1 2 3) '(4 5 6)) 5))
  (should-error (eval '(-lambda a t) t) :type 'wrong-type-argument)
  (should (equal (funcall (-lambda (a b) (+ a b)) 1 2) 3))
  (should (equal (funcall (-lambda (a (b c)) (+ a b c)) 1 (list 2 3)) 6))
  (should (equal (funcall (-lambda nil 1)) 1))
  (should (equal (let* ((x 0) (f (-lambda nil (setq x (1+ x)))))
		   (--dotimes 3 (funcall f)) x)
		 3)))

(ert-deftest -setq ()
  "-setq"
  (should (equal (let (a) (-setq a 1) a) 1))
  (should (equal (let (a b) (-setq (a b) (list 1 2)) (list a b)) '(1 2)))
  (should (equal (let (c) (-setq (&plist :c c) (list :c "c")) c) "c"))
  (should (equal (let (a b) (-setq a 1 b 2) (list a b)) '(1 2)))
  (should (equal (let (a b) (-setq (&plist :a a) '(:a (:b 1)) (&plist :b b) a)
		      (cons b a))
		 '(1 :b 1)))
  (should (equal (let (a b x y z) (ignore a b x y z)
		      (-setq (a b (&plist 'x x 'y y)) '(1 2 (x 3 y 4)) z x))
		 3))
  (should-error (eval '(let (a) (-setq a)) t) :type 'wrong-number-of-arguments))

(ert-deftest -each ()
  "-each --each"
  (should (equal (let (l) (-each '(1 2 3) (lambda (x) (push x l))) l) '(3 2 1)))
  (should (equal (let (l) (--each '(1 2 3) (push it l)) l) '(3 2 1)))
  (should (equal (-each '(1 2 3) #'identity) nil))
  (should (equal (--each '(1 2 3) it) nil))
  (should (equal (--each '(1 2 3) nil) nil))
  (should (equal (let (l) (-each nil (lambda (x) (push x l))) l) nil))
  (should (equal (let (l) (--each nil (push it l)) l) nil))
  (should (equal (let (l) (--each '(1 2 3) (push it l) (setq it-index -1)) l) '(3 2 1))))

(ert-deftest -each-while ()
  "-each-while --each-while"
  (should (equal (let (l) (-each-while '(2 4 5 6) #'cl-evenp (lambda (x) (push x l))) l)
		 '(4 2)))
  (should (equal (let (l) (--each-while '(1 2 3 4) (< it 3) (push it l)) l) '(2 1)))
  (should (equal (let ((s 0)) (--each-while '(1 3 4 5) (< it 5) (setq s (+ s it))) s) 8))
  (should (equal (let (s) (-each-while nil (lambda (_) t) (lambda (_) (setq s t))) s) nil))
  (should (equal (let (s) (--each-while nil t (setq s t)) s) nil))
  (should (equal (let (s) (--each-while '(1) t (setq s it)) s) 1))
  (should (equal (let (s) (--each-while '(1) nil (setq s it)) s) nil))
  (should (equal (let (s) (--each-while '(1) (setq it t) (setq s it)) s) 1))
  (should (equal (let (s) (--each-while '(1 . 2) nil (setq s it)) s) nil))
  (should (equal (let (s) (--each-while '(1 . 2) (< it-index 0) (setq s it)) s) nil))
  (should (equal (let (s) (--each-while '(1 . 2) (< it-index 1) (setq s it)) s) 1))
  (should (equal (--each-while '(1) t t) nil)))

(ert-deftest -each-indexed ()
  "-each-indexed --each-indexed"
  (should (equal (let (l) (-each-indexed '(a b c) (lambda (i x) (push (list x i) l))) l)
		 '((c 2) (b 1) (a 0))))
  (should (equal (let (l) (--each-indexed '(a b c) (push (list it it-index) l)) l)
		 '((c 2) (b 1) (a 0))))
  (should (equal (let (l) (--each-indexed 'nil (push it l)) l) 'nil))
  (should (equal (let (l) (-each-indexed nil (lambda (_ x) (push x l))) l) nil)))

(ert-deftest -each-r ()
  "-each-r --each-r"
  (should (equal (let (l) (-each-r '(1 2 3) (lambda (x) (push x l))) l) '(1 2 3)))
  (should (equal (let (l) (--each-r '(1 2 3) (push it l)) l) '(1 2 3)))
  (should (equal (-each-r '(1 2 3) #'identity) nil))
  (should (equal (--each-r '(1 2 3) it) nil))
  (should (equal (--each-r '(1 2 3) nil) nil))
  (should (equal (let (l) (--each-r '(1 2 3) (push it l) (setq it-index -1)) l)
		 '(1 2 3)))
  (should (equal (let (l) (-each-r nil (lambda (x) (push x l))) l) nil))
  (should (equal (let (l) (--each-r nil (push it l)) l) nil)))

(ert-deftest -each-r-while ()
  "-each-r-while --each-r-while"
  (should (equal (let (l) (-each-r-while '(2 4 5 6) #'cl-evenp (lambda (x) (push x l))) l)
		 '(6)))
  (should (equal (let (l) (--each-r-while '(1 2 3 4) (>= it 3) (push it l)) l) '(3 4)))
  (should (equal (let ((s 0)) (--each-r-while '(1 2 3 5) (> it 1) (setq s (+ s it))) s)
		 10))
  (should (equal (let (s) (-each-r-while nil (lambda (_) t) (lambda (_) (setq s t))) s) nil))
  (should (equal (let (s) (--each-r-while nil t (setq s t)) s) nil))
  (should (equal (let (s) (--each-r-while '(1) t (setq s it)) s) 1))
  (should (equal (let (s) (--each-r-while '(1) nil (setq s it)) s) nil))
  (should (equal (let (s) (--each-r-while '(1) (setq it t) (setq s it)) s) 1))
  (should (equal (--each-r-while '(1) t t) nil)))

(ert-deftest -dotimes ()
  "-dotimes --dotimes"
  (should (equal (let (s) (-dotimes 3 (lambda (n) (push n s))) s) '(2 1 0)))
  (should (equal (let (s) (-dotimes 0 (lambda (n) (push n s))) s) 'nil))
  (should (equal (let (s) (--dotimes 5 (push it s)) s) '(4 3 2 1 0)))
  (should (equal (let (s) (--dotimes 0 (push it s)) s) nil))
  (should (equal (let (s) (--dotimes 3 (push it s) (setq it -1)) s) '(2 1 0)))
  (should (equal (--dotimes 3 t) nil)))

(ert-deftest !cons ()
  "!cons"
  (should (equal (let (l) (!cons 5 l) l) '(5)))
  (should (equal (let ((l '(3))) (!cons 5 l) l) '(5 3))))

(ert-deftest !cdr ()
  "!cdr"
  (should (equal (let ((l '(3))) (!cdr l) l) 'nil))
  (should (equal (let ((l '(3 5))) (!cdr l) l) '(5))))

(ert-deftest -partial ()
  "-partial"
  (should (equal (funcall (-partial #'+ 5)) 5))
  (should (equal (funcall (-partial #'- 5) 3) 2))
  (should (equal (funcall (-partial #'+ 5 2) 3) 10))
  (should (equal (funcall (-partial #'+)) 0))
  (should (equal (funcall (-partial #'+) 5) 5))
  (should (equal (apply (-partial #'+ 5) 10 '(1 2)) 18)))

(ert-deftest -rpartial ()
  "-rpartial"
  (should (equal (funcall (-rpartial #'- 5)) -5))
  (should (equal (funcall (-rpartial #'- 5) 8) 3))
  (should (equal (funcall (-rpartial #'- 5 2) 10) 3))
  (should (equal (funcall (-rpartial #'-)) 0))
  (should (equal (apply (-rpartial #'- 1) 2 '(20 3)) -22)))

(ert-deftest -juxt ()
  "-just"
  (should (equal (funcall (-juxt) 1 2) 'nil))
  (should (equal (funcall (-juxt #'+ #'- #'* #'/) 7 5) '(12 2 35 1)))
  (should (equal (mapcar (-juxt #'number-to-string #'1+) '(1 2)) '(("1" 2) ("2" 3))))
  (should (equal (funcall (-juxt #'+ #'-)) '(0 0)))
  (should (equal (funcall (-juxt)) 'nil)))

(ert-deftest -compose ()
  "-compose"
  (should (equal (funcall (-compose #'- #'1+ #'+) 1 2 3) -7))
  (should (equal (funcall (-compose #'identity #'1+) 3) 4))
  (should (equal (mapcar (-compose #'not #'stringp) '(nil "")) '(t nil)))
  (should (equal (funcall (-compose #'1+ #'identity) 3) 4))
  (should (equal (mapcar (lambda (fn) (list (funcall fn 0) (funcall fn 1)))
			 (list (-compose (-compose #'natnump #'1+) #'lognot)
			       (-compose #'natnump (-compose #'1+ #'lognot))
			       (-compose #'natnump #'1+ #'lognot)))
		 '((t nil) (t nil) (t nil))))
  (should (equal (funcall (-compose)) nil))
  (should (equal (funcall (-compose) nil) nil))
  (should (equal (funcall (-compose) nil 1) nil))
  (should (equal (funcall (-compose) 1) 1))
  (should (equal (funcall (-compose) 1 2) 1))
  (should (equal (-compose #'+) #'+)))

(ert-deftest -applify ()
  "-applify"
  (should (equal (funcall (-applify #'+) nil) 0))
  (should (equal (mapcar (-applify #'+) '((1 1 1) (1 2 3) (5 5 5))) '(3 6 15)))
  (should (equal (funcall (-applify #'<) '(3 6)) t))
  (should (equal (apply (-applify #'+) '(nil)) 0))
  (should (equal (apply (-applify #'+) '((1 2))) 3))
  (should-error (funcall (-applify #'+)) :type 'wrong-number-of-arguments)
  (should (equal (mapcar (-applify (lambda (a b) `(,a (,b))))
			 '((1 1) (1 2) (5 5)))
		 '((1 (1)) (1 (2)) (5 (5))))))

(ert-deftest -on ()
  "-on"
  (should (equal (-sort (-on #'< #'length) '((1 2 3) (1) (1 2))) '((1) (1 2) (1 2 3))))
  (should (equal (funcall (-on #'min #'string-to-number) "22" "2" "1" "12") 1))
  (should (equal (-min-by (-on #'> #'length) '((1 2 3) (4) (1 2))) '(4)))
  (should (equal (-min-by (-on #'string< #'number-to-string) '(2 100 22)) 22))
  (should (equal (-max-by (-on #'> #'car) '((2 2 3) (3) (1 2))) '(3)))
  (should (equal (-sort (-on #'string< #'number-to-string) '(12 1 2 22)) '(1 12 2 22)))
  (should (equal (funcall (-on #'+ #'1+) 1 2) 5))
  (should (equal (funcall (-on #'+ #'identity) 1 2) 3))
  (should (equal (funcall (-on #'* #'length) '(1 2 3) '(4 5)) 6))
  (should (equal (funcall (-on (-on #'+ #'length) #'cdr) '(1 2 3) '(4 5)) 3))
  (should (equal (funcall (-on #'+ (lambda (x) (length (cdr x)))) '(1 2 3) '(4 5)) 3))
  (should (equal (-sort (-on #'< #'car) '((3 2 5) (2) (1 2))) '((1 2) (2) (3 2 5))))
  (should (equal (-sort (-on #'< (lambda (x) (length x))) '((1 2 3) (1) (1 2)))
		 '((1) (1 2) (1 2 3))))
  (should (equal (-sort (-on (-on #'< #'car) #'cdr) '((0 3) (2 1) (4 2 8)))
		 '((2 1) (4 2 8) (0 3))))
  (should (equal (-sort (-on #'< #'cadr) '((0 3) (2 1) (4 2 8)))
		 '((2 1) (4 2 8) (0 3))))
  (should (equal (funcall (-on #'not #'not) nil) nil))
  (should (equal (funcall (-on #'+ #'1+) 1 10 100 1000) 1115))
  (should (equal (funcall (-on #'+ #'1+) 1 10 100) 114))
  (should (equal (funcall (-on #'+ #'1+) 1 10) 13))
  (should (equal (funcall (-on #'+ #'1+) 1) 2))
  (should (equal (funcall (-on #'+ #'1+)) 0))
  (should (equal (funcall (-on #'1+ #'1+) 0) 2))
  (should (equal (funcall (-on #'+ #'*)) 0))
  (should (equal (funcall (-on #'* #'+)) 1)))

(ert-deftest -flip ()
  "-flip"
  (should (equal (-sort (-flip #'<) '(4 3 6 1)) '(6 4 3 1)))
  (should (equal (funcall (-flip #'-) 3 2 1 10) 4))
  (should (equal (funcall (-flip #'1+) 1) 2))
  (should (equal (funcall (-flip #'<) 2 1) t))
  (should (equal (funcall (-flip #'list) 1 2 3) '(3 2 1)))
  (should (equal (funcall (-flip #'list) 1 2) '(2 1)))
  (should (equal (funcall (-flip #'list) 1) '(1)))
  (should (equal (funcall (-flip #'list)) 'nil))
  (should (equal (let ((a (list 1 2 3 4))) (apply (-flip #'-) a) a) '(1 2 3 4))))

(ert-deftest -rotate-args ()
  "-rotate-args"
  (should (equal (funcall (-rotate-args -1 #'list) 1 2 3 4) '(2 3 4 1)))
  (should (equal (funcall (-rotate-args 1 #'-) 1 10 100) 89))
  (should (equal (funcall (-rotate-args 2 #'list) 3 4 5 1 2) '(1 2 3 4 5)))
  (should (equal (funcall (-rotate-args -2 #'list) 1 2 3 4) '(3 4 1 2)))
  (should (equal (funcall (-rotate-args 0 #'list) 1 2 3 4) '(1 2 3 4)))
  (should (equal (funcall (-rotate-args 1 #'list) 1 2 3 4) '(4 1 2 3)))
  (should (equal (funcall (-rotate-args 2 #'list) 1 2 3 4) '(3 4 1 2)))
  (should (equal (funcall (-rotate-args -2 #'list) 1 2 3) '(3 1 2)))
  (should (equal (funcall (-rotate-args -1 #'list) 1 2 3) '(2 3 1)))
  (should (equal (funcall (-rotate-args 0 #'list) 1 2 3) '(1 2 3)))
  (should (equal (funcall (-rotate-args 1 #'list) 1 2 3) '(3 1 2)))
  (should (equal (funcall (-rotate-args 2 #'list) 1 2 3) '(2 3 1)))
  (should (equal (funcall (-rotate-args -2 #'list) 1 2) '(1 2)))
  (should (equal (funcall (-rotate-args -1 #'list) 1 2) '(2 1)))
  (should (equal (funcall (-rotate-args 0 #'list) 1 2) '(1 2)))
  (should (equal (funcall (-rotate-args 1 #'list) 1 2) '(2 1)))
  (should (equal (funcall (-rotate-args 2 #'list) 1 2) '(1 2)))
  (should (equal (funcall (-rotate-args -2 #'list) 1) '(1)))
  (should (equal (funcall (-rotate-args -1 #'list) 1) '(1)))
  (should (equal (funcall (-rotate-args 0 #'list) 1) '(1)))
  (should (equal (funcall (-rotate-args 1 #'list) 1) '(1)))
  (should (equal (funcall (-rotate-args 2 #'list) 1) '(1)))
  (should (equal (funcall (-rotate-args -2 #'list)) 'nil))
  (should (equal (funcall (-rotate-args -1 #'list)) 'nil))
  (should (equal (funcall (-rotate-args 0 #'list)) 'nil))
  (should (equal (funcall (-rotate-args 1 #'list)) 'nil))
  (should (equal (funcall (-rotate-args 2 #'list)) 'nil))
  (should (equal (let ((a (list 1 2 3))) (apply (-rotate-args 2 #'-) a) a) '(1 2 3))))

(ert-deftest -const ()
  "-const"
  (should (equal (funcall (-const 2) 1 3 "foo") 2))
  (should (equal (mapcar (-const 1) '("a" "b" "c" "d")) '(1 1 1 1)))
  (should (equal (-sum (mapcar (-const 1) '("a" "b" "c" "d"))) 4))
  (should (equal (funcall (-const t)) t))
  (should (equal (funcall (-const nil)) nil))
  (should (equal (funcall (-const t) nil) t))
  (should (equal (funcall (-const nil) nil) nil)))

(ert-deftest -cut ()
  "-cut"
  (should (equal (funcall (-cut list 1 <> 3 <> 5) 2 4) '(1 2 3 4 5)))
  (should (equal (-map (-cut funcall <> 5) `(1+ 1- ,(lambda (x) (/ 1.0 x)))) '(6 4 0.2)))
  (should (equal (-map (-cut <> 1 2 3) '(list vector string))
		 '((1 2 3) [1 2 3] "")))
  (should (equal (-filter (-cut < <> 5) '(1 3 5 7 9)) '(1 3))))

(ert-deftest -not ()
  "-not"
  (should (equal (funcall (-not #'numberp) "5") t))
  (should (equal (-sort (-not #'<) '(5 2 1 0 6)) '(6 5 2 1 0)))
  (should (equal (-filter (-not (-partial #'< 4)) '(1 2 3 4 5 6 7 8)) '(1 2 3 4)))
  (should (equal (funcall (-not (lambda (a b c) (and (< a b) (< b c)))) 1 2 3) nil))
  (should (equal (funcall (-not (lambda (a b c) (and (< a b) (< b c)))) 3 2 1) t))
  (should (equal (funcall (-not #'<) 1 2) nil))
  (should (equal (funcall (-not #'<) 2 1) t))
  (should (equal (funcall (-not #'+) 1) nil))
  (should (equal (funcall (-not #'+)) nil)))

(ert-deftest -orfn ()
  "-orfn"
  (should (equal (-filter (-orfn #'natnump #'booleanp) '(1 nil "a" -4 b c t))
		 '(1 nil t)))
  (should (equal (funcall (-orfn #'symbolp (-cut string-match-p "x" <>)) "axe") 1))
  (should (equal (funcall (-orfn #'= #'+) 1 1) t))
  (should (equal (funcall (-orfn #'+ #'null)) 0))
  (should (equal (funcall (-orfn #'+ #'null) 1) 1))
  (should (equal (funcall (-orfn #'+ #'null) 1 2) 3))
  (should (equal (funcall (-orfn #'+ #'null) 1 2 3) 6))
  (should (equal (funcall (-orfn #'ignore #'+)) 0))
  (should (equal (funcall (-orfn #'ignore #'+) 1) 1))
  (should (equal (funcall (-orfn #'ignore #'+) 1 2) 3))
  (should (equal (funcall (-orfn #'ignore #'+) 1 2 3) 6))
  (should (equal (-filter (-orfn #'symbolp) '(a b 1 nil t 2)) '(a b nil t)))
  (should (equal (-filter (-orfn #'null) '(a b 1 nil t 2)) '(nil)))
  (should (equal (-filter (-orfn) '(nil t)) 'nil))
  (should (equal (-orfn #'null) #'null))
  (should (equal (-orfn) #'ignore)))

(ert-deftest -andfn ()
  "-andfn"
  (should (equal (-filter (-andfn #'numberp (-cut < <> 5)) '(a 1 b 6 c 2)) '(1 2)))
  (should (equal (mapcar (-andfn #'numberp #'1+) '(a 1 b 6)) '(nil 2 nil 7)))
  (should (equal (funcall (-andfn #'= #'+) 1 1) 2))
  (should (equal (funcall (-andfn #'ignore #'+)) nil))
  (should (equal (funcall (-andfn #'ignore #'+) 1) nil))
  (should (equal (funcall (-andfn #'ignore #'+) 1 2) nil))
  (should (equal (funcall (-andfn #'+ #'ignore)) nil))
  (should (equal (funcall (-andfn #'+ #'ignore) 1) nil))
  (should (equal (funcall (-andfn #'+ #'ignore) 1 2) nil))
  (should (equal (funcall (-andfn #'+ #'list)) 'nil))
  (should (equal (funcall (-andfn #'+ #'list) 1) '(1)))
  (should (equal (funcall (-andfn #'+ #'list) 1 2) '(1 2)))
  (should (equal (funcall (-andfn #'list #'+)) nil))
  (should (equal (funcall (-andfn #'list #'+) 1) 1))
  (should (equal (funcall (-andfn #'list #'+) 1 2) 3))
  (should (equal (funcall (-andfn #'* #'+)) 0))
  (should (equal (funcall (-andfn #'+ #'*)) 1))
  (should (equal (-andfn #'null) #'null))
  (should (equal (funcall (-andfn)) t))
  (should (equal (funcall (-andfn) nil) t))
  (should (equal (funcall (-andfn) t) t)))

(ert-deftest -iteratefn ()
  "-iteratefn"
  (should (equal (funcall (-iteratefn #'square 3) 2) 256))
  (should (equal (funcall (-iteratefn (lambda (x) (* x x)) 3) 2) 256))
  (should (equal (funcall (-iteratefn '1+ 3) 1) 4))
  (should (equal (funcall (-iteratefn 'cdr 3) '(1 2 3 4 5)) '(4 5)))
  (should (equal (let ((init '(1 2 3 4 5)) (fn 'cdr))
		   (and (equal (funcall (-iteratefn fn 0) init)
			       (-last-item (-iterate fn init (1+ 0))))
			(equal (funcall (-iteratefn fn 3) init)
			       (-last-item (-iterate fn init (1+ 3))))
			(equal (funcall (-iteratefn fn 5) init)
			       (-last-item (-iterate fn init (1+ 5))))))
		 t)))

(ert-deftest -fixfn ()
  "-fixfn"
  (should (approx= (funcall (-fixfn #'cos #'approx=) 0.7) 0.7390851332151607))
  (should (equal (funcall (-fixfn (lambda (x) (expt (+ x 10) 0.25))) 2.0) 1.8555845286409378))
  (should (equal (funcall (-fixfn #'sin #'approx=) 0.1) '(halted . t))))

(ert-deftest -prodfn ()
  "-prodfn"
  (should (equal (funcall (-prodfn #'1+ #'1- #'number-to-string) '(1 2 3)) '(2 1 "3")))
  (should (equal (-map (-prodfn #'1- #'1+) '((1 2) (3 4) (5 6))) '((0 3) (2 5) (4 7))))
  (should (equal (apply #'+ (funcall (-prodfn #'length #'string-to-number) '((t) "5")))
		 6))
  (should (equal (let ((f #'1+) (g #'1-) (ff #'string-to-number) (gg #'length)
		       (input '(1 2)) (input2 "foo") (input3 '("10" '(1 2 3))))
		   (and
		    (equal
		     (funcall (-prodfn f g) input)
		     (funcall (-juxt (-compose f #'car) (-compose g #'cadr)) input))
		    (equal
		     (funcall (-compose (-prodfn f g) (-juxt ff gg)) input2)
		     (funcall (-juxt (-compose f ff) (-compose g gg)) input2))
		    (equal
		     (funcall (-compose (-partial #'nth 0) (-prodfn f g)) input)
		     (funcall (-compose f (-partial #'nth 0)) input))
		    (equal
		     (funcall (-compose (-partial #'nth 1) (-prodfn f g)) input)
		     (funcall (-compose g (-partial #'nth 1)) input))
		    (equal
		     (funcall (-compose (-prodfn f g) (-prodfn ff gg)) input3)
		     (funcall (-prodfn (-compose f ff) (-compose g gg)) input3))))
		 t)))

(ert-deftest dash--member-fn ()
  "Test `dash--member-fn'."
  (dolist (cmp '(nil equal))
    (let ((-compare-fn cmp))
      (should (eq (dash--member-fn) #'member))))
  (let ((-compare-fn #'eq))
    (should (eq (dash--member-fn) #'memq)))
  (let ((-compare-fn #'eql))
    (should (eq (dash--member-fn) #'memql)))
  (let* ((-compare-fn #'string=)
         (member (dash--member-fn)))
    (should-not (memq member '(member memq memql)))
    (should-not (funcall member "foo" ()))
    (should-not (funcall member "foo" '(bar)))
    (should (equal (funcall member "foo" '(foo bar)) '(foo bar)))
    (should (equal (funcall member "foo" '(bar foo)) '(foo)))))

(ert-deftest dash--assoc-fn ()
  "Test `dash--assoc-fn'."
  (dolist (cmp '(nil equal))
    (let ((-compare-fn cmp))
      (should (eq (dash--assoc-fn) #'assoc))))
  (let ((-compare-fn #'eq))
    (should (eq (dash--assoc-fn) #'assq)))
  (let* ((-compare-fn #'string=)
         (assoc (dash--assoc-fn)))
    (should-not (memq assoc '(assoc assq)))
    (should-not (funcall assoc 'foo ()))
    (should-not (funcall assoc 'foo '(foo)))
    (should-not (funcall assoc 'foo '((bar))))
    (should-not (funcall assoc 'bar '((foo) bar)))
    (should (equal (funcall assoc 'foo '((foo))) '(foo)))
    (should (equal (funcall assoc 'bar '((foo) (bar))) '(bar)))
    (should (equal (funcall assoc 'foo '((foo 1) (foo 2))) '(foo 1)))))

(ert-deftest dash--hash-test-fn ()
  "Test `dash--hash-test-fn'."
  (let ((-compare-fn nil))
    (should (eq (dash--hash-test-fn) #'equal)))
  (dolist (cmp '(equal eq eql))
    (let ((-compare-fn cmp))
      (should (eq (dash--hash-test-fn) cmp))))
  (let ((-compare-fn #'string=))
    (should-not (dash--hash-test-fn))))

(ert-deftest dash--size+ ()
  "Test `dash--size+'."
  (dotimes (a 3)
    (dotimes (b 3)
      (should (= (dash--size+ a b) (+ a b)))))
  (should (= (dash--size+ (- most-positive-fixnum 10) 5)
             (- most-positive-fixnum 5)))
  (should (= (dash--size+ (1- most-positive-fixnum) 0)
             (1- most-positive-fixnum)))
  (dotimes (i 2)
    (should (= (dash--size+ (1- most-positive-fixnum) (1+ i))
               most-positive-fixnum)))
  (dotimes (i 3)
    (should (= (dash--size+ most-positive-fixnum i)
               most-positive-fixnum))))

(ert-deftest dash--numbers<= ()
  "Test `dash--numbers<='."
  (should (dash--numbers<= ()))
  (should (dash--numbers<= '(0)))
  (should (dash--numbers<= '(0 0)))
  (should (dash--numbers<= '(0 1)))
  (should (dash--numbers<= '(0 0 0)))
  (should (dash--numbers<= '(0 0 1)))
  (should (dash--numbers<= '(0 1 1)))
  (should-not (dash--numbers<= '(a)))
  (should-not (dash--numbers<= '(0 a)))
  (should-not (dash--numbers<= '(a 0)))
  (should-not (dash--numbers<= '(0 0 a)))
  (should-not (dash--numbers<= '(0 a 0)))
  (should-not (dash--numbers<= '(1 0)))
  (should-not (dash--numbers<= '(1 0 0)))
  (should-not (dash--numbers<= '(1 1 0))))

(ert-deftest dash--next-lex-perm ()
  "Test `dash--next-lex-perm'."
  (dolist (vecs '(([0])
                  ([0 0])
                  ([0 1] . [1 0])
                  ([0 0 0])
                  ([0 0 1] . [0 1 0])
                  ([0 1 0] . [1 0 0])
                  ([0 1 1] . [1 0 1])
                  ([1 0 0])
                  ([1 0 1] . [1 1 0])
                  ([1 1 0])
                  ([1 1 1])
                  ([0 1 2] . [0 2 1])
                  ([0 2 1] . [1 0 2])
                  ([1 0 2] . [1 2 0])
                  ([1 2 0] . [2 0 1])
                  ([2 0 1] . [2 1 0])
                  ([2 1 0])))
    (let* ((prev (copy-sequence (car vecs)))
           (copy (copy-sequence prev))
           (next (cdr vecs)))
      (should (equal (dash--next-lex-perm prev (length prev)) next))
      ;; Vector should either be updated in place, or left alone.
      (should (equal prev (or next copy))))))

(ert-deftest dash--lex-perms ()
  "Test `dash--lex-perms'."
  (dolist (perms '(([0] (0))
                   ([0 0] (0 0))
                   ([0 1] (0 1) (1 0))
                   ([1 0] (1 0))))
    (should (equal (dash--lex-perms (copy-sequence (car perms)))
                   (cdr perms))))
  (should (equal (dash--lex-perms (vector 0 1) (vector 2 3))
                 '((2 3) (3 2))))
  (should (equal (dash--lex-perms (vector 0 1 2) (vector 5 4 3))
                 '((5 4 3)
                   (5 3 4)
                   (4 5 3)
                   (4 3 5)
                   (3 5 4)
                   (3 4 5)))))

(ert-deftest dash--length= ()
  "Test `dash--length='."
  (dotimes (n 10)
    (let ((l (make-list n nil)))
      (should (dash--length= l n))
      (should-not (dash--length= l (1- n)))
      (should-not (dash--length= l (1+ n))))))

;;; test.el ends here
